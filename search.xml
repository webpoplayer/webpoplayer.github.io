<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CentOS 内核升级</title>
      <link href="/centos-kernel-upgrade.html"/>
      <url>/centos-kernel-upgrade.html</url>
      
        <content type="html"><![CDATA[<ul><li><p>查询当前内核版本</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">uname</span> -r</code></pre></li><li><p>启用 ELRepo 仓库</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 导入该源的秘钥</span><span class="token function">sudo</span> rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org <span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># 启用该源仓库</span><span class="token function">sudo</span> rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm <span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># 查看有哪些内核版本可供安装</span><span class="token function">sudo</span> yum --disablerepo<span class="token operator">=</span><span class="token string">"*"</span> --enablerepo<span class="token operator">=</span><span class="token string">"elrepo-kernel"</span> list available </code></pre></li><li><p>安装</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 安装的是主线版本，该版本比较激进，慎重选择</span><span class="token function">sudo</span> yum --enablerepo<span class="token operator">=</span>elrepo-kernel <span class="token function">install</span> kernel-ml -y <span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># 安装的长期稳定版本，稳定可靠</span><span class="token function">sudo</span> yum --enablerepo<span class="token operator">=</span>elrepo-kernel <span class="token function">install</span> kernel-lt -y </code></pre><p>以上安装完成后重启</p></li><li><p>设置 GRUB 默认的内核版本<br>编辑 <code>/etc/default/grub</code> 并设置 <code>GRUB_DEFAULT=0</code>。意思是 GRUB 初始化页面的第一个内核将作为默认内核。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> vim /etc/default/grupGRUB_TIMEOUT<span class="token operator">=</span>5GRUB_DISTRIBUTOR<span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">sed</span> 's, release .*$,,g' /etc/system-release<span class="token variable">)</span></span>"</span>GRUB_DEFAULT<span class="token operator">=</span>saved  <span class="token comment" spellcheck="true"># 这里的saved改为0即可</span>GRUB_DISABLE_SUBMENU<span class="token operator">=</span>trueGRUB_TERMINAL_OUTPUT<span class="token operator">=</span><span class="token string">"console"</span>GRUB_CMDLINE_LINUX<span class="token operator">=</span><span class="token string">"rhgb quiet"</span>GRUB_DISABLE_RECOVERY<span class="token operator">=</span><span class="token string">"true"</span></code></pre><p>执行加载内核：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> grub2-mkconfig -o /boot/grub2/grub.cfg</code></pre></li><li><p>更新系统</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> yum update -y</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> CentOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> 内核 </tag>
            
            <tag> kernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zabbix分布式构建</title>
      <link href="/zabbix-proxy-build.html"/>
      <url>/zabbix-proxy-build.html</url>
      
        <content type="html"><![CDATA[<h3 id="Zabbix-分布式构建"><a href="#Zabbix-分布式构建" class="headerlink" title="Zabbix  分布式构建"></a>Zabbix  分布式构建</h3><h4 id="0x01-环境介绍"><a href="#0x01-环境介绍" class="headerlink" title="0x01 环境介绍"></a>0x01 环境介绍</h4><p>众所周知，proxy 可以代替 zabbix server 收集性能和可用性数据,然后把数据汇报给 zabbix server,并且在一定程度上分担了zabbix server 的压力。此外，当所有agents和proxies报告给一个Zabbix server并且所有数据都集中收集时，使用proxy是实现集中式和分布式监控的最简单方法。</p><p>本实验采用Zabbix 5.0.6 环境进行搭建，拓扑如下</p><p><img src="https://raw.githubusercontent.com/webpoplayer/netpic/main/img/202111031932730.png" alt="分布式架构"></p><p>Server</p><ul><li>ip:172.16.252.100</li><li>hostname:zabbix</li></ul><p>Proxy</p><ul><li>ip:172.16.252.119</li><li>hostname:lab-node1</li></ul><p>Client</p><ul><li>ip:172.16.252.201</li><li>hostname:lab-client-node2</li></ul><h4 id="0x02-Server-安装"><a href="#0x02-Server-安装" class="headerlink" title="0x02 Server 安装"></a>0x02 Server 安装</h4><p>参照之前文章,此处不再复述安装步骤</p><h4 id="0x03-Proxy-安装配置"><a href="#0x03-Proxy-安装配置" class="headerlink" title="0x03 Proxy 安装配置"></a>0x03 Proxy 安装配置</h4><ol><li><p>安装zabbix官方源余epel源,注意操作前将SElinux与防火墙永久关闭(实验环境,实际生产环境请配置相关端口策略)</p><pre class=" language-bash"><code class="language-bash">yum -y <span class="token function">install</span> epel-release.noarchrpm -Uvh https://repo.zabbix.com/zabbix/5.0/rhel/7/x86_64/zabbix-release-5.0-1.el7.noarch.rpm  </code></pre></li><li><p>安装配置Zabbix-proxy相关组件</p><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> -y zabbix-proxy zabbix-proxy-mysql mariadb mariadb-server zabbix-agent</code></pre></li><li><p>数据库操作优化</p><pre class=" language-bash"><code class="language-bash">vim /etc/my.cnf<span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>datadir<span class="token operator">=</span>/var/lib/mysqlsocket<span class="token operator">=</span>/var/lib/mysql/mysql.socksymbolic-links<span class="token operator">=</span>0character-set-server<span class="token operator">=</span>utf8              <span class="token comment" spellcheck="true">#设置字符集为utf8</span>innodb_file_per_table<span class="token operator">=</span>1                <span class="token comment" spellcheck="true">#设置innodb的每个表文件单独存储</span><span class="token punctuation">[</span>mysqld_safe<span class="token punctuation">]</span>log-error<span class="token operator">=</span>/var/log/mariadb/mariadb.logpid-file<span class="token operator">=</span>/var/run/mariadb/mariadb.pid<span class="token comment" spellcheck="true"># 开启数据库服务,设为开机启动</span> systemctl start mariadb                <span class="token comment" spellcheck="true">#设为开机启动</span> systemctl <span class="token function">enable</span> mariadb               <span class="token comment" spellcheck="true">#开启MariaDB数据</span></code></pre></li><li><p>数据库配置</p><pre class=" language-bash"><code class="language-bash">MariaDB <span class="token punctuation">[</span><span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">></span> create database zabbixproxydb character <span class="token keyword">set</span> utf8 collate utf8_bin<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#创建数据库且字符集为utf8，使web界面显示中文不出现乱码</span>MariaDB <span class="token punctuation">[</span><span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">></span> grant all privileges on zabbixproxydb.* to root@<span class="token string">'localhost'</span> identified by <span class="token string">'passwd1!'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#创建zabbixproxydb数据库，且赋予root用户拥有此数据库全部权限。</span>MariaDB <span class="token punctuation">[</span><span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">></span> flush privileges<span class="token punctuation">;</span></code></pre></li><li><p>导入相关表到数据库</p><pre class=" language-bash"><code class="language-bash">zcat /usr/share/doc/zabbix-proxy-mysql-*/schema.sql.gz <span class="token operator">|</span> mysql -uroot -p zabbixproxydb<span class="token comment" spellcheck="true">#将模板数据恢复至zabbixproxydb数据</span>mysql -uroot -ppasswd1<span class="token operator">!</span> zabbixproxydb -e <span class="token string">"show tables"</span> <span class="token comment" spellcheck="true">#查看数据是否导入</span></code></pre></li></ol><ol start="6"><li><p>修改zabbix_proxy.conf配置</p><pre class=" language-bash"><code class="language-bash">vim /etc/zabbix/zabbix_proxy.confProxyMode<span class="token operator">=</span>0                <span class="token comment" spellcheck="true"># 默认即为0，代表 Proxy 处于主动模式，即 Proxy 主动去请求 Zabbix Server 获取监控项；1 代表被动模式</span>Server<span class="token operator">=</span>172.16.252.100    <span class="token comment" spellcheck="true">#改成service端ip需要向service发送数据</span>ServerPort<span class="token operator">=</span>10051         <span class="token comment" spellcheck="true"># 默认即为10051，Zabbix Server 监听端口，同上只在 Proxy 为主动模式时生效</span>Hostname<span class="token operator">=</span>lab-node1       <span class="token comment" spellcheck="true"># Server端添加proxy的时候需要一致，建议采用主机名</span>LogFile<span class="token operator">=</span>/var/log/zabbix/zabbix_proxy.log    <span class="token comment" spellcheck="true"># Proxy 日志文件位置</span>LogFileSize<span class="token operator">=</span>0PidFile<span class="token operator">=</span>/var/run/zabbix/zabbix_proxy.pidDBHost<span class="token operator">=</span>localhost         <span class="token comment" spellcheck="true"># 连接数据库的主机</span>DBName<span class="token operator">=</span>zabbixproxydb     <span class="token comment" spellcheck="true"># 数据库名</span>DBUser<span class="token operator">=</span>root                <span class="token comment" spellcheck="true"># 连接用户</span>DBPassword<span class="token operator">=</span>passwd1<span class="token operator">!</span>      <span class="token comment" spellcheck="true"># 用户密码</span>ConfigFrequency<span class="token operator">=</span>60  <span class="token comment" spellcheck="true"># proxy主动从server端检索配置更新的频率，单位秒，主动proxy 参数， 被动 proxies忽略此项</span>DataSenderFrequency<span class="token operator">=</span>60   <span class="token comment" spellcheck="true"># Proxy 向 Zabbix Server 发送监控数据间隔，单位为秒</span>Timeout<span class="token operator">=</span>4</code></pre></li></ol><ol start="6"><li><p>Proxy agent配置</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#修改配置zabbix_agentd.conf配置文件</span>vim /etc/zabbix/zabbix_agentd.confPidFile<span class="token operator">=</span>/var/run/zabbix/zabbix_agentd.pidLogFile<span class="token operator">=</span>/var/log/zabbix/zabbix_agentd.logLogFileSize<span class="token operator">=</span>0Server<span class="token operator">=</span>172.16.252.119        <span class="token comment" spellcheck="true">#若为纯主动模式需要注释此行</span>ServerActive<span class="token operator">=</span>172.16.252.119    <span class="token comment" spellcheck="true">#主动模式，数据通过proxy代理向Server传送数据</span>Hostname<span class="token operator">=</span>lab-node1            <span class="token comment" spellcheck="true">#zabbix server web上添加自身需要用到</span><span class="token comment" spellcheck="true">#将proxy与agent启动并加入开机启动</span>systemctl start zabbix-agent.service <span class="token comment" spellcheck="true">#启动agent服务</span>systemctl <span class="token function">enable</span> zabbix-agent.service <span class="token comment" spellcheck="true">#agent添加到开机启动</span>systemctl start zabbix-proxy.service <span class="token comment" spellcheck="true">#启动proxy服务</span>systemctl <span class="token function">enable</span> zabbix-proxy.service <span class="token comment" spellcheck="true">#proxy添加到开机启动</span></code></pre></li></ol><h4 id="0x04-前台web配置"><a href="#0x04-前台web配置" class="headerlink" title="0x04 前台web配置"></a>0x04 前台web配置</h4><p>进入前台web页面,点击<code>管理</code> –<code>agent代理程序</code> —<code>创建代理</code> </p><p><img src="https://raw.githubusercontent.com/webpoplayer/netpic/main/img/202111031933839.png" alt="创建代理"></p><p>输入代理程序名,此处对应zabbix_proxy.conf配置文件中的hostname,与ip地址,选择被动模式</p><p><img src="https://raw.githubusercontent.com/webpoplayer/netpic/main/img/202111031933824.png" alt="设定代理"></p><h4 id="0x05-Client-安装配置"><a href="#0x05-Client-安装配置" class="headerlink" title="0x05 Client 安装配置"></a>0x05 Client 安装配置</h4><ol><li><p>安装agent服务</p><pre class=" language-bash"><code class="language-bash">yum -y <span class="token function">install</span> zabbix-agent</code></pre></li></ol><ol start="2"><li><p>agent修改配置</p><pre class=" language-bash"><code class="language-bash">vim /etc/zabbix/zabbix_agentd.confPidFile<span class="token operator">=</span>/var/run/zabbix/zabbix_agentd.pidLogFile<span class="token operator">=</span>/var/log/zabbix/zabbix_agentd.logLogFileSize<span class="token operator">=</span>0Server<span class="token operator">=</span>172.16.252.119        <span class="token comment" spellcheck="true">#若为纯主动模式需要注释此行</span>ServerActive<span class="token operator">=</span>172.16.252.119     <span class="token comment" spellcheck="true">#主动模式，数据通过proxy代理向Server传送数据</span>Hostname<span class="token operator">=</span>lab-node1            <span class="token comment" spellcheck="true">#zabbix server web上添加自身需要用到</span><span class="token comment" spellcheck="true">#启动并添加到自启动</span>systemctl start zabbix-agentsystemctl <span class="token function">enable</span> zabbix-agent</code></pre></li><li><p>主机加入监控</p><p>web页面点击–配置–主机–创建主机</p><p><img src="https://raw.githubusercontent.com/webpoplayer/netpic/main/img/202111031933111.png" alt="创建主机"></p></li></ol><p>   并链接到对应的系统模板中</p><p>   <img src="https://raw.githubusercontent.com/webpoplayer/netpic/main/img/202111031933970.png" alt="链接模板"></p><p>稍等几分钟后即可在配置–主机中看到<code>可用性</code> 状态变绿</p><p><img src="https://raw.githubusercontent.com/webpoplayer/netpic/main/img/202111031933789.png" alt="查看状态"></p><p>这时，监控状态已经正常，可查看当前监控项的最新数据。</p>]]></content>
      
      
      <categories>
          
          <category> Zabbix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zabbix </tag>
            
            <tag> 分布式 </tag>
            
            <tag> Proxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker部署Bitwarden</title>
      <link href="/buid-bitwarden.html"/>
      <url>/buid-bitwarden.html</url>
      
        <content type="html"><![CDATA[<h2 id="Docker部署Bitwarden"><a href="#Docker部署Bitwarden" class="headerlink" title="Docker部署Bitwarden"></a>Docker部署Bitwarden</h2><h3 id="0x01-什么是Bitwarden"><a href="#0x01-什么是Bitwarden" class="headerlink" title="0x01. 什么是Bitwarden?"></a>0x01. 什么是Bitwarden?</h3><p><code>开源免费的密码管理器，Bitwarden的原理是使用高强度的AES256 算法对你的个人数据进行本地加密，然后再传输到云端服务器来实现网络同步。bitwarden使用的是微软的Azure云服务器，利用PBKDF2 加密主密码，而且还支持二步验证登录，安全性方面你可以不用担心。</code></p><h3 id="0x02-如何搭建"><a href="#0x02-如何搭建" class="headerlink" title="0x02. 如何搭建?"></a>0x02. 如何搭建?</h3><p>本文介绍采用Docker容器方式安装部署Bitwarden服务,所以需要先安装docker环境,步骤如下</p><p>首先,需要有一台在公网的Liunx服务器,安装好docker,以及docker-compose,相关安装(以Centos 为例)</p><h4 id="1-安装docker"><a href="#1-安装docker" class="headerlink" title="1. 安装docker"></a>1. 安装docker</h4><pre class=" language-shell"><code class="language-shell">#安装docker依赖yum -y install yum-utils#设置镜像仓库,默认在国外,拉取镜像速度慢,改为国内阿里云仓库yum-config-manager \    --add-repo \    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo#更新软件包索引yum makecache fast#安装dockeryum -y install docker-ce docker-ce-cli containerd.io#启动docker并加入开机启动项systemctl daemon-reload #重载镜像仓库systemctl start docker  #开启dockersystemctl enable docker #设置开机启动</code></pre><h4 id="2-安装docker-compose"><a href="#2-安装docker-compose" class="headerlink" title="2. 安装docker-compose"></a>2. 安装docker-compose</h4><pre class=" language-shell"><code class="language-shell">#下载docker-compose,采用国内镜像,速度较快curl -L https://get.daocloud.io/docker/compose/releases/download/1.25.5/docker-compose-'uname -s'-'uname -m' > /usr/local/bin/docker-compose#授权docker-composechmod +x /usr/local/bin/docker-composedocker-compose version #查看版本验证安装</code></pre><h4 id="3-在本地任意目录创建bitwarden"><a href="#3-在本地任意目录创建bitwarden" class="headerlink" title="3. 在本地任意目录创建bitwarden"></a>3. 在本地任意目录创建bitwarden</h4><pre class=" language-shell"><code class="language-shell">#在data目录下创建bitwarden目录mkdir -p data/bitwarden</code></pre><h4 id="4-编写bitwarden配置文件"><a href="#4-编写bitwarden配置文件" class="headerlink" title="4. 编写bitwarden配置文件"></a>4. 编写bitwarden配置文件</h4><pre class=" language-shell"><code class="language-shell">#编写配置文件vim config.envSIGNUPS_ALLOWED=true   #允许开放注册,首次搭建完成需注册帐号登录DOMAIN=https://127.0.0.1 #地址,可配置自己拥有的域名,将A记录指向此服务器DATABASE_URL=/data/bitwarden.db #数据库在容器内的路径ROCKET_WORKERS=10  #设置服务器使用几个线程WEB_VAULT_ENABLED=true #是否开启 Web 客户端</code></pre><h4 id="5-编写docker-compose-yml文件"><a href="#5-编写docker-compose-yml文件" class="headerlink" title="5. 编写docker-compose.yml文件"></a>5. 编写docker-compose.yml文件</h4><pre class=" language-shell"><code class="language-shell">#vim docker-compose.ymlversion: '3'services:  bitwarden:  #服务名    image: mprasil/bitwarden:latest  #指定服务镜像    container_name: bitwarden  #指定启动容器名    restart: always    #跟随机器开启启动    volumes:      - ./data:/data  #挂载容器内data到当前目录data下,数据持久化    env_file:      - config.env  #指定服务配置文件    ports:      - "1024:80"  #端口映射,将当前服务器1024端口映射到容器内80端口,默认直接80:80即可,因主机未备案,80端口未开,故使用其他端口</code></pre><h4 id="6-在当前目录启动容器"><a href="#6-在当前目录启动容器" class="headerlink" title="6. 在当前目录启动容器"></a>6. 在当前目录启动容器</h4><pre class=" language-shell"><code class="language-shell">#在docker-compose文件存放路径中运行,-d后台运行docker-compose up -d</code></pre><h4 id="7-查看运行状态"><a href="#7-查看运行状态" class="headerlink" title="7. 查看运行状态"></a>7. 查看运行状态</h4><pre class=" language-shell"><code class="language-shell">#使用docker ps查看容器运行状态docker ps [root@webpoplayer bitwarden]# docker psCONTAINER ID   IMAGE                 COMMAND                              CREATED        STATUS         PORTS                       NAMESad1f39eed3b1    mprasil/bitwarden:latest   "./bitwarden_rs"         26 hours ago        Up 26 hours         3012/tcp, 0.0.0.0:1024->80/tcp   bitwarden</code></pre><h3 id="0x03-成品展示"><a href="#0x03-成品展示" class="headerlink" title="0x03. 成品展示"></a>0x03. 成品展示</h3><h4 id="在浏览器中启动"><a href="#在浏览器中启动" class="headerlink" title="在浏览器中启动"></a>在浏览器中启动</h4><p>在浏览器地址栏输入http://服务器ip:1024  </p><p><img src="https://raw.githubusercontent.com/webpoplayer/netpic/main/img/20210701195838.png" alt="image-20201005203418729"></p><p>​                                                                                            首次登录,注册帐号登录,进入即可</p><h4 id="在手机app端操作"><a href="#在手机app端操作" class="headerlink" title="在手机app端操作"></a>在手机app端操作</h4><p> 在应用市场下载安装bitwarden后,启动后</p><p><img src="https://raw.githubusercontent.com/webpoplayer/netpic/main/img/20210701195914.png" alt="image-20201005203613884"></p><p>​                                                                                    点击左上角齿轮,输入服务器地址(为服务器公网地址)</p><p><img src="https://raw.githubusercontent.com/webpoplayer/netpic/main/img/20210701195954.png" alt="image-20201005203800653"></p><p>​                                                                           点击保存,输入之前在网页上注册的帐号密码即可,登录后界面</p><p><img src="https://raw.githubusercontent.com/webpoplayer/netpic/main/img/20210701200001.png" alt="image-20201005203937364"></p><p>至此,docker容器部署bitwarden服务到此完成</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> bitwarden </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker-compose部署开源EFK与winlogbeat收集分析Window日志</title>
      <link href="/build-efk.html"/>
      <url>/build-efk.html</url>
      
        <content type="html"><![CDATA[<h3 id="Docker-compose部署开源EFK与winlogbeat收集分析Window日志"><a href="#Docker-compose部署开源EFK与winlogbeat收集分析Window日志" class="headerlink" title="Docker-compose部署开源EFK与winlogbeat收集分析Window日志"></a>Docker-compose部署开源EFK与winlogbeat收集分析Window日志</h3><h4 id="概念以及架构原理"><a href="#概念以及架构原理" class="headerlink" title="概念以及架构原理"></a>概念以及架构原理</h4><p>Elasticsearch + Fluentd + Kibana 简称EFK，是一套开源的日志搜索与可视化方案。其中ELasticsearch 负责日志分析和存储，Fluentd 负责日志收集，Kibana 负责界面展示。基本工作原理：Fluentd实时读取日志文件的方式获取日志内容，将日志发送至Elasticsearch，并通过Kibana展示。</p><p><img src="https://raw.githubusercontent.com/webpoplayer/netpic/main/img/20210704001432.png" alt="简单原理架构图"></p><h4 id="环境需求介绍"><a href="#环境需求介绍" class="headerlink" title="环境需求介绍"></a>环境需求介绍</h4><p>此处为单点演示，CentOS主机需要预先安装docker与docker-compose</p><table><thead><tr><th>Host</th><th>OS</th><th>IP</th></tr></thead><tbody><tr><td>Elasticsearch</td><td>CentOS  7.8</td><td>172.16.252.66</td></tr><tr><td>Fluentd</td><td>CentOS  7.8</td><td>172.16.252.66</td></tr><tr><td>Kibana</td><td>CentOS  7.8</td><td>172.16.252.66</td></tr><tr><td>DC (演示被监控)</td><td>Windows 2012R2</td><td>172.16.252.110</td></tr></tbody></table><h4 id="目录结构准备"><a href="#目录结构准备" class="headerlink" title="目录结构准备"></a>目录结构准备</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 目录结构</span>efk├── data├── docker-compose.yml└── fluentd    ├── conf    │   └── fluent.conf    └── Dockerfile<span class="token comment" spellcheck="true"># 创建目录结构</span><span class="token function">sudo</span> <span class="token function">mkdir</span> -p /app/efk/<span class="token punctuation">{</span>data,fluentd/conf<span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 给data目录777权限,否则Elasticsearch无法启动</span><span class="token function">sudo</span> <span class="token function">chmod</span> 777 /app/efk/data</code></pre><h4 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Dockerfile文件</span><span class="token function">sudo</span> vim /efk/fluentd/Dockerfile<span class="token comment" spellcheck="true"># 写入如下内容</span>FROM fluent/fluentd:v1.9.1-debian-1.0User rootRUN gem <span class="token function">install</span> fluent-plugin-elasticsearchUser fluent<span class="token comment" spellcheck="true"># 构建fluentd镜像</span><span class="token function">sudo</span> docker build -t custom-fluentd:latest ./</code></pre><h4 id="fluentd-配置"><a href="#fluentd-配置" class="headerlink" title="fluentd 配置"></a>fluentd 配置</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 编写fluentd配置文件</span><span class="token function">sudo</span> vim /efk/fluentd/conf/fluent.conf<span class="token operator">&lt;</span>source<span class="token operator">></span>  @type forward  port 24224  bind 0.0.0.0<span class="token operator">&lt;</span>/source<span class="token operator">></span><span class="token operator">&lt;</span>match *.**<span class="token operator">></span>  @type copy  <span class="token operator">&lt;</span>store<span class="token operator">></span>    @type elasticsearch    host elasticsearch    port 9200    logstash_format <span class="token boolean">true</span>    logstash_prefix fluentd    logstash_dateformat %Y%m%d    include_tag_key <span class="token boolean">true</span>    type_name access_log    tag_key @log_name    flush_interval 1s  <span class="token operator">&lt;</span>/store<span class="token operator">></span>  <span class="token operator">&lt;</span>store<span class="token operator">></span>    @type stdout  <span class="token operator">&lt;</span>/store<span class="token operator">></span><span class="token operator">&lt;</span>/match<span class="token operator">></span></code></pre><h4 id="docker-compose-yml文件编写"><a href="#docker-compose-yml文件编写" class="headerlink" title="docker-compose.yml文件编写"></a>docker-compose.yml文件编写</h4><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'2'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">nginx</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">'8001:80'</span>    <span class="token key atrule">links</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> fluentd    <span class="token key atrule">logging</span><span class="token punctuation">:</span>      <span class="token key atrule">driver</span><span class="token punctuation">:</span> <span class="token string">'fluentd'</span>      <span class="token key atrule">options</span><span class="token punctuation">:</span>        <span class="token key atrule">fluentd-address</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">24224</span>        <span class="token key atrule">tag</span><span class="token punctuation">:</span> nginx  <span class="token key atrule">fluentd</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> custom<span class="token punctuation">-</span>fluentd    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> fluentd    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./fluentd/conf<span class="token punctuation">:</span>/fluentd/etc    <span class="token key atrule">links</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">'elasticsearch'</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">'24224:24224'</span>      <span class="token punctuation">-</span> <span class="token string">'24224:24224/udp'</span>  <span class="token key atrule">elasticsearch</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">:</span>7.8.1    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> elasticsearch    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">'9200:9200'</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">'discovery.type=single-node'</span>      <span class="token punctuation">-</span> <span class="token string">'cluster.name=docker-cluster'</span>      <span class="token punctuation">-</span> <span class="token string">'bootstrap.memory_lock=true'</span>      <span class="token punctuation">-</span> <span class="token string">'ES_JAVA_OPTS=-Xms1g -Xmx1g'</span> <span class="token comment" spellcheck="true">#此处资源限制建议大于等于1g内存,否则elasticsearch容器会启动失败</span>    <span class="token key atrule">ulimits</span><span class="token punctuation">:</span>      <span class="token key atrule">memlock</span><span class="token punctuation">:</span>        <span class="token key atrule">soft</span><span class="token punctuation">:</span> <span class="token number">-1</span>        <span class="token key atrule">hard</span><span class="token punctuation">:</span> <span class="token number">-1</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./data<span class="token punctuation">:</span>/usr/share/elasticsearch/data   <span class="token key atrule">kibana</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> kibana<span class="token punctuation">:</span>7.8.1    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> kibana    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">links</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">'elasticsearch'</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">'5601:5601'</span></code></pre><h4 id="服务端启动"><a href="#服务端启动" class="headerlink" title="服务端启动"></a>服务端启动</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 在efk目录通过docker-comopose.yml文件启动</span><span class="token function">sudo</span> docker-compose up -d</code></pre><h4 id="密码设置"><a href="#密码设置" class="headerlink" title="密码设置"></a>密码设置</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Elasticsearch 7.8</span><span class="token comment" spellcheck="true"># 进入es容器内部</span>docker <span class="token function">exec</span> -it elasticsearch /bin/bash<span class="token comment" spellcheck="true"># 修改es配置文件elasticsearch.yml</span><span class="token function">vi</span> /usr/share/elasticsearch/config/elasticsearch.yml<span class="token comment" spellcheck="true"># 添加以下内容</span>xpack.security.enabled: <span class="token boolean">true</span>xpack.license.self_generated.type: basicxpack.security.transport.ssl.enabled: <span class="token boolean">true</span><span class="token comment" spellcheck="true"># 保存后退出docker容器</span><span class="token keyword">exit</span><span class="token comment" spellcheck="true"># 重启elasticsearch</span>docker restart elasticsearch<span class="token comment" spellcheck="true"># 重启后进入es容器中</span>docker <span class="token function">exec</span> -it elasticsearch /bin/bash<span class="token comment" spellcheck="true"># 进入es 名录目录 </span><span class="token function">cd</span> /usr/share/elastic/bin<span class="token comment" spellcheck="true"># 执行命令，交互式设置密码（注意保存好全部密码）</span>./elasticsearch-setup-passwords interactive<span class="token comment" spellcheck="true"># Kibana 7.8</span><span class="token comment" spellcheck="true">#进入Kibana容器内部</span>docker <span class="token function">exec</span> -it kibana /bin/bash<span class="token comment" spellcheck="true"># 修改kibana配置文件kibana.yml</span><span class="token function">vi</span> /usr/share/kibana/config/kibana.yml<span class="token comment" spellcheck="true">#添加以下内容</span>i8n.locale: <span class="token string">"zh-CN"</span> <span class="token comment" spellcheck="true"># 修改页面显示语言为中文简体(按喜好修改)</span>elasticsearch.username: <span class="token string">"kibana"</span>elasticsearch.password: <span class="token string">"passwd1!"</span><span class="token comment" spellcheck="true"># 保存后退出docker容器</span><span class="token keyword">exit</span><span class="token comment" spellcheck="true"># 重启kibana</span>docker restart kibana<span class="token comment" spellcheck="true"># 容器启动后通过浏览器https://172.16.252.66:5601可进入前端查看页面</span></code></pre><h4 id="Windows-winlogbeat安装"><a href="#Windows-winlogbeat安装" class="headerlink" title="Windows winlogbeat安装"></a>Windows winlogbeat安装</h4><h5 id="下载Winlogbeat"><a href="#下载Winlogbeat" class="headerlink" title="下载Winlogbeat"></a>下载Winlogbeat</h5><p>地址:<a href="https://www.elastic.co/downloads/beats/winlogbeat">https://www.elastic.co/downloads/beats/winlogbeat</a></p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 编辑winlogbeat.yml</span><span class="token punctuation">...</span> <span class="token punctuation">...</span>. <span class="token key atrule">setup.kibana</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># Kibana Host</span>  <span class="token comment" spellcheck="true"># Scheme and port can be left out and will be set to the default (http and 5601)</span>  <span class="token comment" spellcheck="true"># In case you specify and additional path, the scheme is required: http://localhost:5601/path</span>  <span class="token comment" spellcheck="true"># IPv6 addresses should always be defined as: https://[2001:db8::1]:5601</span>  <span class="token key atrule">host</span><span class="token punctuation">:</span> <span class="token string">"172.168.252.66:5601"</span> <span class="token comment" spellcheck="true"># 修改为Kibana服务端ip与端口</span><span class="token punctuation">...</span> <span class="token punctuation">...</span><span class="token comment" spellcheck="true"># ---------------------------- Elasticsearch Output ----------------------------</span><span class="token key atrule">output.elasticsearch</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># Array of hosts to connect to.</span>  <span class="token key atrule">hosts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"172.16.252.66:9200"</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 修改elasticsearch 服务端地址与端口</span>  <span class="token comment" spellcheck="true"># Protocol - either `http` (default) or `https`.</span>  <span class="token comment" spellcheck="true">#protocol: "https"</span>  <span class="token comment" spellcheck="true"># Authentication credentials - either API key or username/password.</span>  <span class="token comment" spellcheck="true">#api_key: "id:api_key"</span>  <span class="token key atrule">username</span><span class="token punctuation">:</span> <span class="token string">"elastic"</span>  <span class="token comment" spellcheck="true"># 如有配置用户,添加用户</span>  <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">"passwd1!"</span> <span class="token comment" spellcheck="true"># 如有配置密码,添加密码</span><span class="token punctuation">...</span> <span class="token punctuation">...</span></code></pre><h5 id="Windows-启用winlogbeat"><a href="#Windows-启用winlogbeat" class="headerlink" title="Windows 启用winlogbeat"></a>Windows 启用winlogbeat</h5><pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># 将下载的winlogbeat解压到需要查看日志的服务端,使用powershell 管理员模式进入目录执行</span><span class="token punctuation">.</span>\install<span class="token operator">-</span>service<span class="token operator">-</span>winlogbeat<span class="token punctuation">.</span>ps1 <span class="token comment" spellcheck="true"># 执行服务安装脚本,如提示脚本未进行</span><span class="token function">set</span><span class="token operator">-</span>ExecutionPolicy RemoteSigned <span class="token comment" spellcheck="true"># 提示未进行签名验证,关掉验证重启服务器再执行安装脚本</span><span class="token punctuation">.</span><span class="token operator">/</span>winlogbeat <span class="token operator">-</span>c winlogbeat<span class="token punctuation">.</span>yml <span class="token operator">-</span>e <span class="token comment" spellcheck="true"># 测试查看</span><span class="token punctuation">.</span><span class="token operator">/</span>winlogbeat setup <span class="token operator">-</span>e  <span class="token comment" spellcheck="true"># 加载 Kibana 仪表板</span><span class="token function">Start-Service</span> winlogbeat <span class="token comment" spellcheck="true"># 启动服务</span></code></pre><h5 id="winlogbeat服务安装"><a href="#winlogbeat服务安装" class="headerlink" title="winlogbeat服务安装"></a>winlogbeat服务安装</h5><p><img src="https://raw.githubusercontent.com/webpoplayer/netpic/main/img/20210703233417.png" alt="winlogbeat服务安装"></p><p><img src="https://raw.githubusercontent.com/webpoplayer/netpic/main/img/20210703223646.png" alt="Windows 启用winlogbeat"></p><h4 id="Kibana前端配置"><a href="#Kibana前端配置" class="headerlink" title="Kibana前端配置"></a>Kibana前端配置</h4><h5 id="新增日志索引"><a href="#新增日志索引" class="headerlink" title="新增日志索引"></a>新增日志索引</h5><p><img src="https://raw.githubusercontent.com/webpoplayer/netpic/main/img/20210703222440.png" alt="新增日志索引"></p><h5 id="添加winlogbeat索引"><a href="#添加winlogbeat索引" class="headerlink" title="添加winlogbeat索引"></a>添加winlogbeat索引</h5><p><img src="https://raw.githubusercontent.com/webpoplayer/netpic/main/img/20210703223942.png" alt="添加winlogbeat索引"></p><h5 id="按时间戳创建winlogbeat索引"><a href="#按时间戳创建winlogbeat索引" class="headerlink" title="按时间戳创建winlogbeat索引"></a>按时间戳创建winlogbeat索引</h5><p><img src="https://raw.githubusercontent.com/webpoplayer/netpic/main/img/20210703224142.png" alt="按时间戳创建索引"></p><h5 id="确认索引内容"><a href="#确认索引内容" class="headerlink" title="确认索引内容"></a>确认索引内容</h5><p><img src="https://raw.githubusercontent.com/webpoplayer/netpic/main/img/20210703224403.png" alt="确认内容"></p><h5 id="查看索引中日志"><a href="#查看索引中日志" class="headerlink" title="查看索引中日志"></a>查看索引中日志</h5><p><img src="https://raw.githubusercontent.com/webpoplayer/netpic/main/img/20210703224726.png" alt="查看索引中的日志"></p><h5 id="按自己喜好筛选显示字段"><a href="#按自己喜好筛选显示字段" class="headerlink" title="按自己喜好筛选显示字段"></a>按自己喜好筛选显示字段</h5><p><img src="https://raw.githubusercontent.com/webpoplayer/netpic/main/img/20210703225425.png" alt="筛选重要字段保存模板"></p><h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><p><img src="https://raw.githubusercontent.com/webpoplayer/netpic/main/img/20210703225802.png" alt="日志查看"></p><h4 id="按主机查看事件与统计"><a href="#按主机查看事件与统计" class="headerlink" title="按主机查看事件与统计"></a>按主机查看事件与统计</h4><p><img src="https://raw.githubusercontent.com/webpoplayer/netpic/main/img/20210703230045.png" alt="SIEM查看"></p><h4 id="数据类型选择"><a href="#数据类型选择" class="headerlink" title="数据类型选择"></a>数据类型选择</h4><p><img src="https://raw.githubusercontent.com/webpoplayer/netpic/main/img/20210704012625.png" alt="数据选择"></p><h4 id="检查并应用数据"><a href="#检查并应用数据" class="headerlink" title="检查并应用数据"></a>检查并应用数据</h4><p><img src="https://raw.githubusercontent.com/webpoplayer/netpic/main/img/20210703233631.png" alt="应用数据"></p><h4 id="选择主机并查看数据"><a href="#选择主机并查看数据" class="headerlink" title="选择主机并查看数据"></a>选择主机并查看数据</h4><p><img src="https://raw.githubusercontent.com/webpoplayer/netpic/main/img/20210703234011.png" alt="选择主机查看数据"></p><h4 id="根据喜好查看自己关心的数据类型"><a href="#根据喜好查看自己关心的数据类型" class="headerlink" title="根据喜好查看自己关心的数据类型"></a>根据喜好查看自己关心的数据类型</h4><p><img src="https://raw.githubusercontent.com/webpoplayer/netpic/main/img/20210703234235.png" alt="数据查看"></p><p>EFK使用winlogbeat监控windows搭建以及基础操作基本完工，另可以在运行EFK容器的主机上跑一个Nginx做代理，一般企业环境自建DNS，可以新建一个A记录与CNAME别名解析记录，内网域名或公网域名访问，根据Nginx代理转发到Kibana容器上，这样在内部或者外部就不需要通过ip:端口的方式访问，直接使用域名访问，比较容易记，关于EFK其他功能操作后续摸索即可。</p>]]></content>
      
      
      <categories>
          
          <category> EFK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> EFK </tag>
            
            <tag> winlogbeat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7 部署Zabbix5.0</title>
      <link href="/buid-zabbix.html"/>
      <url>/buid-zabbix.html</url>
      
        <content type="html"><![CDATA[<h3 id="CentOS7-部署Zabbix5-0"><a href="#CentOS7-部署Zabbix5-0" class="headerlink" title="CentOS7 部署Zabbix5.0"></a>CentOS7 部署Zabbix5.0</h3><p><img src="https://raw.githubusercontent.com/webpoplayer/netpic/main/img/20210701224548.png" alt="logo"></p><h4 id="什么是Zabbix"><a href="#什么是Zabbix" class="headerlink" title="什么是Zabbix ?"></a>什么是Zabbix ?</h4><p>zabbix（[`zæbiks]）是一个基于WEB接口的提供分布式系统监视以及网络监视功能的企业级的开源解决方案。</p><p>zabbix能监视各种网络参数，保证服务器系统的安全运营；并提供灵活的通知机制以让系统管理员快速定位/解决存在的各种问题。</p><p>zabbix由2部分构成，zabbix server与可选组件zabbix agent。</p><p>zabbix server可以通过SNMP，zabbix agent，ping，埠监视等方法提供对远程服务器/网络状态的监视，数据收集等功能，它可以运行在Linux，Solaris，HP-UX，AIX，Free BSD，Open BSD，OS X等平台上。</p><h4 id="Zabbix-架构"><a href="#Zabbix-架构" class="headerlink" title="Zabbix 架构"></a>Zabbix 架构</h4><p>ZabbixSever运行在LAMP或者LNMP环境上,可通过搭建Proxy,实现分布式建制,简单架构图如下</p><p><img src="https://raw.githubusercontent.com/webpoplayer/netpic/main/img/20210701223500.png" alt="架构图"></p><h4 id="如何搭建"><a href="#如何搭建" class="headerlink" title="如何搭建?"></a>如何搭建?</h4><ul><li><p>安装好Linux(任意发行版均可,演示为CentOS 7.x,防火墙关闭或放行10050与10051端口,关闭SElinux</p><pre class=" language-shell"><code class="language-shell">#修改计算机名为zabbix$ sudo hostnamectl set-hostname zabbix #查看系统版本$ sudo cat /etc/redhat-release         CentOS Linux release 7.4.1708 (Core) #修改网络配置 网卡编号以自己系统安装完成后显示为准,这边显示ens32$ sudo vi /etc/sysconfig/network-scripts/ifcfg-ens32 TYPE=EthernetPROXY_METHOD=noneBROWSER_ONLY=no#BOOTPROTO=dhcp #直接在这改也可以,个人习惯问题,喜欢注释掉,另起写ipDEFROUTE=yesIPV4_FAILURE_FATAL=noIPV6INIT=yesIPV6_AUTOCONF=yesIPV6_DEFROUTE=yesIPV6_FAILURE_FATAL=no#IPV6_ADDR_GEN_MODE=stable-privacy  #此行也注释掉NAME=ens32UUID=4f9c06a4-23a6-40a7-81d0-7c5010abb0efDEVICE=ens32#ONBOOT=no  #注释掉IPV6_PRIVACY=noBOOTPROTO=static                   #设置网卡静态IP模式ONBOOT=yes                         #开机启动IPADDR=172.16.252.100            #设置IP地址NETMASK=255.255.255.0            #设置子网掩码GATEWAY=172.16.252.2            #设置网关DNS1=223.5.5.5                    #设置DNS地址#退出vi编辑模式,按esc,输入':wq!'保存退出#重启网卡$ sudo systemctl restart network #查看网卡IP配置是否成功$ sudo ifconfig ens32              ens32: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500        inet 172.16.252.100  netmask 255.255.255.0  broadcast 172.16.252.255        inet6 fe80::20c:29ff:fe13:39ff  prefixlen 64  scopeid 0x20<link>        ether 00:0c:29:13:39:ff  txqueuelen 1000  (Ethernet)        RX packets 290  bytes 28350 (27.6 KiB)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 225  bytes 39888 (38.9 KiB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0$ sudo vi /etc/selinux/config           #修改SElinux配置文件,永久关闭SElinux,重启生效# This file controls the state of SELinux on the system.# SELINUX= can take one of these three values:#     enforcing - SELinux security policy is enforced.#     permissive - SELinux prints warnings instead of enforcing.#     disabled - No SELinux policy is loaded.SELINUX=disabled  #将此行enabled修改为disabled# SELINUXTYPE= can take one of three two values:#     targeted - Targeted processes are protected,#     minimum - Modification of targeted policy. Only selected processes are protected.#     mls - Multi Level Security protection.SELINUXTYPE=targeted#验证SElinux是否成功关闭$ sudo setenforce 0 #重启后验证SElinux已成功关闭$ sudo setenforce 0 setenforce: SELinux is disabled        #关闭防火墙$ sudo systemctl stop firewalld         #永久关闭防火墙,禁止开机启动$ sudo systemctl disable firewalld      Removed symlink /etc/systemd/system/multi-user.target.wants/firewalld.service.Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.#查看防火墙状态(此处演示,生产环境视情况而定,不建议直接关掉)$ sudo systemctl status firewalld       ● firewalld.service - firewalld - dynamic firewall daemon   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; disabled; vendor preset: enabled)   Active: inactive (dead)     Docs: man:firewalld(1)... ...</code></pre></li></ul><h4 id="安装环境准备"><a href="#安装环境准备" class="headerlink" title="安装环境准备"></a>安装环境准备</h4><pre class=" language-shell"><code class="language-shell">#安装zabbix下载源$ sudo rpm -Uvh https://repo.zabbix.com/zabbix/5.0/rhel/7/x86_64/zabbix-release-5.0-1.el7.noarch.rpmRetrieving https://repo.zabbix.com/zabbix/5.0/rhel/7/x86_64/zabbix-release-5.0-1.el7.noarch.rpmwarning: /var/tmp/rpm-tmp.OHAfBE: Header V4 RSA/SHA512 Signature, key ID a14fe591: NOKEYPreparing...                          ################################# [100%]Updating / installing... 1:zabbix-release-5.0-1.el7         ################################# [100%]#安装zabbix-server 与zabbix-agent$ sudo yum install zabbix-server-mysql zabbix-agentLoaded plugins: fastestmirror, langpacks... ...Installed:zabbix-agent.x86_64 0:5.0.6-1.el7                zabbix-server-mysql.x86_64 0:5.0.6-1.el7               Dependency Installed:OpenIPMI.x86_64 0:2.0.27-1.el7                         OpenIPMI-libs.x86_64 0:2.0.27-1.el7               OpenIPMI-modalias.x86_64 0:2.0.27-1.el7                fping.x86_64 0:3.10-1.el7                         unixODBC.x86_64 0:2.3.1-14.el7                        Complete!#安装zabbix前端启用收藏安装源$ sudo yum install centos-release-scl -y... ...Installed:centos-release-scl.noarch 0:2-3.el7.centos                                                               Dependency Installed:centos-release-scl-rh.noarch 0:2-3.el7.centos                                                            Complete!#编辑zabbix前端安装源$ sudo vim /etc/yum.repos.d/zabbix.repo ... [zabbix-frontend]name=Zabbix Official Repository frontend - $basearchbaseurl=http://repo.zabbix.com/zabbix/5.0/rhel/7/$basearch/frontendenabled=1 #此处修改为1 启用gpgcheck=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-ZABBIX-A14FE591...</code></pre><h4 id="环境依赖包安装"><a href="#环境依赖包安装" class="headerlink" title="环境依赖包安装"></a>环境依赖包安装</h4><pre class=" language-shell"><code class="language-shell">#安装zabbix环境依赖包$ sudo yum -y install zabbix-web-mysql-scl zabbix-nginx-conf-scl Loaded plugins: fastestmirror, langpacks... ...                                                       Installed:zabbix-nginx-conf-scl.noarch 0:5.0.6-1.el7           zabbix-web-mysql-scl.noarch 0:5.0.6-1.el7          Dependency Installed:rh-nginx116-nginx.x86_64 1:1.16.1-4.el7.1            rh-nginx116-runtime.x86_64 0:1.16-1.el7            rh-php72.x86_64 0:1-2.el7                            rh-php72-php-bcmath.x86_64 0:7.2.24-1.el7          rh-php72-php-cli.x86_64 0:7.2.24-1.el7               rh-php72-php-common.x86_64 0:7.2.24-1.el7          rh-php72-php-fpm.x86_64 0:7.2.24-1.el7               rh-php72-php-gd.x86_64 0:7.2.24-1.el7              rh-php72-php-json.x86_64 0:7.2.24-1.el7              rh-php72-php-ldap.x86_64 0:7.2.24-1.el7            rh-php72-php-mbstring.x86_64 0:7.2.24-1.el7          rh-php72-php-mysqlnd.x86_64 0:7.2.24-1.el7         rh-php72-php-pdo.x86_64 0:7.2.24-1.el7               rh-php72-php-pear.noarch 1:1.10.5-1.el7            rh-php72-php-process.x86_64 0:7.2.24-1.el7           rh-php72-php-xml.x86_64 0:7.2.24-1.el7             rh-php72-php-zip.x86_64 0:7.2.24-1.el7               rh-php72-runtime.x86_64 0:1-2.el7                  zabbix-web.noarch 0:5.0.6-1.el7                      zabbix-web-deps-scl.noarch 0:5.0.6-1.el7           Complete!</code></pre><h4 id="MySQL安装配置"><a href="#MySQL安装配置" class="headerlink" title="MySQL安装配置"></a>MySQL安装配置</h4><pre class=" language-shell"><code class="language-shell">#MySQL安装准备$ sudo vi /etc/yum.repos.d/mysql-community.repo #编辑MySQL安装源  [mysql57-community]  name=MySQL 5.7 Community Server  baseurl=http://repo.mysql.com/yum/mysql-5.7-community/el/7/$basearch/  enabled=1 #此处改为1,其他版本则改为0  gpgcheck=0 #此处改为0,不检查gpg-key  gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql#安装MySQL 5.7$ sudo yum -y install mysql-community-serverLoaded plugins: fastestmirror, langpacks... ...Installed:  mysql-community-libs.x86_64 0:5.7.32-1.el7        mysql-community-libs-compat.x86_64 0:5.7.32-1.el7       mysql-community-server.x86_64 0:5.7.32-1.el7     Dependency Installed:  mysql-community-client.x86_64 0:5.7.32-1.el7         mysql-community-common.x86_64 0:5.7.32-1.el7        Dependency Updated:  postfix.x86_64 2:2.10.1-9.el7                                                                            Replaced:  mariadb-libs.x86_64 1:5.5.56-2.el7                                                                       Complete!</code></pre><p>数据库配置</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#启动MySQL数据库</span>$ <span class="token function">sudo</span> systemctl start mysqld<span class="token comment" spellcheck="true">#设为开机启动</span>$ <span class="token function">sudo</span> systemctl <span class="token function">enable</span> mysqld<span class="token comment" spellcheck="true">#设置MySQL数据库root密码</span>$ <span class="token function">sudo</span> <span class="token function">grep</span> <span class="token string">'temporary password'</span> /var/log/mysqld.log  <span class="token comment" spellcheck="true">#MySQL安装完成后,默认在/var/log/mysqld.log中会有默认密码</span>2020-12-07T00:31:45.104451Z 1 <span class="token punctuation">[</span>Note<span class="token punctuation">]</span> A temporary password is generated <span class="token keyword">for</span> root@localhost: wv,fe76Re:pg<span class="token comment" spellcheck="true">#将密码修改为'passwd1!'提示不满足当前安全策略</span>  mysql<span class="token operator">></span> ALTER USER <span class="token string">'root'</span>@<span class="token string">'localhost'</span> IDENTIFIED BY <span class="token string">'passwd1!'</span><span class="token punctuation">;</span>  ERROR 1819 <span class="token punctuation">(</span>HY000<span class="token punctuation">)</span>: Your password does not satisfy the current policy requirements<span class="token variable">$sudo</span> vim /etc/my.cnf <span class="token comment" spellcheck="true">#修改默认密码策略</span><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Remove leading # and set to the amount of RAM for the most important data</span><span class="token comment" spellcheck="true"># cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.</span><span class="token comment" spellcheck="true"># innodb_buffer_pool_size = 128M</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Remove leading # to turn on a very important data integrity option: logging</span><span class="token comment" spellcheck="true"># changes to the binary log between backups.</span><span class="token comment" spellcheck="true"># log_bin</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Remove leading # to set options mainly useful for reporting servers.</span><span class="token comment" spellcheck="true"># The server defaults are faster for transactions and fast SELECTs.</span><span class="token comment" spellcheck="true"># Adjust sizes as needed, experiment to find the optimal values.</span><span class="token comment" spellcheck="true"># join_buffer_size = 128M</span><span class="token comment" spellcheck="true"># sort_buffer_size = 2M</span><span class="token comment" spellcheck="true"># read_rnd_buffer_size = 2M</span>datadir<span class="token operator">=</span>/var/lib/mysqlsocket<span class="token operator">=</span>/var/lib/mysql/mysql.sock<span class="token comment" spellcheck="true"># Disabling symbolic-links is recommended to prevent assorted security risks</span>symbolic-links<span class="token operator">=</span>0log-error<span class="token operator">=</span>/var/log/mysqld.logpid-file<span class="token operator">=</span>/var/run/mysqld/mysqld.pidvalidate_password_policy<span class="token operator">=</span>0 <span class="token comment" spellcheck="true">#添加此行</span><span class="token comment" spellcheck="true"># #Mysql默认的密码策略</span>  validate_password_policy：密码策略，默认为MEDIUM策略   validate_password_dictionary_file：密码策略文件，策略为STRONG才需要   validate_password_length：密码最少长度   validate_password_mixed_case_count：大小写字符长度，至少1个   validate_password_number_count ：数字至少1个   validate_password_special_char_count：特殊字符至少1个 <span class="token comment" spellcheck="true">#修改密码策略后需重启Mysql服务后,方可修改密码</span>$ <span class="token function">sudo</span> systemctl restart mysqld$ <span class="token function">sudo</span> mysql -uroot -p Enter password:  Welcome to the MySQL monitor.  Commands end with <span class="token punctuation">;</span> or g. Your MySQL connection <span class="token function">id</span> is 2 Server version: 5.7.32 Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> 2000, 2020, Oracle and/or its affiliates. All rights reserved. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners.  Type <span class="token string">'help;'</span> or <span class="token string">'h'</span> <span class="token keyword">for</span> help. Type <span class="token string">'c'</span> to <span class="token function">clear</span> the current input statement. mysql<span class="token operator">></span> ALTER USER <span class="token string">'root'</span>@<span class="token string">'localhost'</span> IDENTIFIED BY <span class="token string">'passwd1!'</span><span class="token punctuation">;</span> Query OK, 0 rows affected <span class="token punctuation">(</span>0.00 sec<span class="token punctuation">)</span></code></pre><p>创建导入Zabbix 数据库架构</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#创建zabbix数据库,设置字符集为uft-8</span>mysql<span class="token operator">></span> create database zabbix character <span class="token keyword">set</span> utf8 collate utf8_bin<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#创建zabbix用户,密码为'passwd1!'</span>mysql<span class="token operator">></span> create user zabbix@localhost identified by <span class="token string">'passsd1!'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#允许zabbix访问zabbix*数据库</span>mysql<span class="token operator">></span> grant all privileges on zabbix.* to zabbix@localhost<span class="token punctuation">;</span> mysql<span class="token operator">></span> quit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#导入初始架构和数据，系统将提示您输入新创建zabbix用户的密码</span>$ <span class="token function">sudo</span> zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz <span class="token operator">|</span> mysql -uzabbix -p zabbixEnter password: 为Zabbix server配置数据库 $ <span class="token function">sudo</span> vim /etc/zabbix/zabbix_server.conf <span class="token comment" spellcheck="true">#       Database user.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Mandatory: no</span><span class="token comment" spellcheck="true"># Default:</span><span class="token comment" spellcheck="true"># DBUser=</span>DBUser<span class="token operator">=</span>zabbix<span class="token comment" spellcheck="true">### Option: DBPassword</span><span class="token comment" spellcheck="true">#       Database password.</span><span class="token comment" spellcheck="true">#       Comment this line if no password is used.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Mandatory: no</span><span class="token comment" spellcheck="true"># Default:</span>DBPassword<span class="token operator">=</span>passwd1<span class="token operator">!</span> <span class="token comment" spellcheck="true">#修改此行,将zabbix用户数据库密码填上</span><span class="token comment" spellcheck="true">### Option: DBSocket</span><span class="token comment" spellcheck="true">#       Path to MySQL socket.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Mandatory: no</span><span class="token comment" spellcheck="true"># Default:</span><span class="token comment" spellcheck="true"># DBSocket=</span></code></pre><h4 id="Nginx环境配置"><a href="#Nginx环境配置" class="headerlink" title="Nginx环境配置"></a>Nginx环境配置</h4><pre class=" language-shell"><code class="language-shell">$ sudo vim /etc/opt/rh/rh-nginx116/nginx/conf.d/zabbix.conf server {        listen          80; #去掉注释,监听80端口        server_name     example.com;         root    /usr/share/zabbix;        index   index.php;        location = /favicon.ico {                log_not_found   off;        }        location / {                try_files       $uri $uri/ =404;        }        location /assets {                access_log      off;                expires         10d;        }        location ~ /.ht {                deny            all;        }        location ~ /(api/|conf[^.]|include|locale) {                deny            all;                return          404;        }</code></pre><p>Zabbix 前端配置</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> vim /etc/opt/rh/rh-nginx116/nginx/nginx.conf<span class="token punctuation">..</span>. <span class="token punctuation">..</span>.    server <span class="token punctuation">{</span>        listen       8080 default_server<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#因zabbix server占用80端口,此处改为8080</span>        listen       <span class="token punctuation">[</span>::<span class="token punctuation">]</span>:80 default_server<span class="token punctuation">;</span>        server_name  _<span class="token punctuation">;</span>        root         /opt/rh/rh-nginx116/root/usr/share/nginx/html<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true"># Load configuration files for the default server block.</span>        include      /etc/opt/rh/rh-nginx116/nginx/default.d/*.conf<span class="token punctuation">;</span>        location / <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        error_page 404 /404.html<span class="token punctuation">;</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token comment" spellcheck="true">#为Zabbix前端配置PHP</span>$ <span class="token function">sudo</span> vim /etc/opt/rh/rh-php72/php-fpm.d/zabbix.conf<span class="token punctuation">[</span>zabbix<span class="token punctuation">]</span>user <span class="token operator">=</span> apachegroup <span class="token operator">=</span> apachelisten <span class="token operator">=</span> /var/opt/rh/rh-php72/run/php-fpm/zabbix.socklisten.acl_users <span class="token operator">=</span> apache,nginx <span class="token comment" spellcheck="true">#修改此行,添加nginx用户</span>listen.allowed_clients <span class="token operator">=</span> 127.0.0.1pm <span class="token operator">=</span> dynamicpm.max_children <span class="token operator">=</span> 50pm.start_servers <span class="token operator">=</span> 5pm.min_spare_servers <span class="token operator">=</span> 5pm.max_spare_servers <span class="token operator">=</span> 35php_value<span class="token punctuation">[</span>session.save_handler<span class="token punctuation">]</span> <span class="token operator">=</span> filesphp_value<span class="token punctuation">[</span>session.save_path<span class="token punctuation">]</span>    <span class="token operator">=</span> /var/opt/rh/rh-php72/lib/php/session/php_value<span class="token punctuation">[</span>max_execution_time<span class="token punctuation">]</span> <span class="token operator">=</span> 300php_value<span class="token punctuation">[</span>memory_limit<span class="token punctuation">]</span> <span class="token operator">=</span> 128Mphp_value<span class="token punctuation">[</span>post_max_size<span class="token punctuation">]</span> <span class="token operator">=</span> 16Mphp_value<span class="token punctuation">[</span>upload_max_filesize<span class="token punctuation">]</span> <span class="token operator">=</span> 2Mphp_value<span class="token punctuation">[</span>max_input_time<span class="token punctuation">]</span> <span class="token operator">=</span> 300php_value<span class="token punctuation">[</span>max_input_vars<span class="token punctuation">]</span> <span class="token operator">=</span> 10000php_value<span class="token punctuation">[</span>date.timezone<span class="token punctuation">]</span> <span class="token operator">=</span> Asia/Shanghai <span class="token comment" spellcheck="true">#修改此处时区,改为亚洲/上海</span></code></pre><p>Zabbix服务启动</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#启动Zabbix server和agent进程</span>$ <span class="token function">sudo</span> systemctl restart zabbix-server zabbix-agent rh-nginx116-nginx rh-php72-php-fpm<span class="token comment" spellcheck="true">#设为开机启动</span>$ <span class="token function">sudo</span> systemctl <span class="token function">enable</span> zabbix-server zabbix-agent rh-nginx116-nginx rh-php72-php-fpmCreated symlink from /etc/systemd/system/multi-user.target.wants/zabbix-server.service to /usr/lib/systemd/system/zabbix-server.service.Created symlink from /etc/systemd/system/multi-user.target.wants/zabbix-agent.service to /usr/lib/systemd/system/zabbix-agent.service.Created symlink from /etc/systemd/system/multi-user.target.wants/rh-nginx116-nginx.service to /usr/lib/systemd/system/rh-nginx116-nginx.service.Created symlink from /etc/systemd/system/multi-user.target.wants/rh-php72-php-fpm.service to /usr/lib/systemd/system/rh-php72-php-fpm.service.</code></pre><h4 id="前端安装"><a href="#前端安装" class="headerlink" title="前端安装"></a>前端安装</h4><p>打开浏览器进入http://你的zabbix服务器ip</p><p><img src="https://raw.githubusercontent.com/webpoplayer/netpic/main/img/20210701224737.png" alt="开始前端安装"></p><p>下一步,环境检查,全部ok后,下一步</p><p><img src="https://raw.githubusercontent.com/webpoplayer/netpic/main/img/20210701224810.png" alt="前端环境检查"></p><p>确认数据库配置,输入之前新建的zabbix数据库用户密码,下一步继续安装</p><p><img src="https://raw.githubusercontent.com/webpoplayer/netpic/main/img/20210701224837.png" alt="前端数据库配置"></p><p>确认Zabbix服务端信息,命名,下一步安装</p><p><img src="https://raw.githubusercontent.com/webpoplayer/netpic/main/img/20210701224903.png" alt="前端信息确认"></p><p> 确认配置,下一步继续安装</p><p><img src="https://raw.githubusercontent.com/webpoplayer/netpic/main/img/20210701224925.png" alt="前端信息确认"></p><p>安装完成</p><p><img src="https://raw.githubusercontent.com/webpoplayer/netpic/main/img/20210701224947.png" alt="安装完成"></p><p>安装完成,使用默认账号Admin密码zabbix登录进入</p><p><img src="https://raw.githubusercontent.com/webpoplayer/netpic/main/img/20210701225024.png" alt="前端登录"></p>]]></content>
      
      
      <categories>
          
          <category> Zabbix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Zabbix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx代理主机内多容器向外暴露</title>
      <link href="/nginx-proxy.html"/>
      <url>/nginx-proxy.html</url>
      
        <content type="html"><![CDATA[<h3 id="Nginx代理主机内多容器向外暴露"><a href="#Nginx代理主机内多容器向外暴露" class="headerlink" title="Nginx代理主机内多容器向外暴露"></a>Nginx代理主机内多容器向外暴露</h3><p>我们知道，docker容器通过端口暴露与宿主机映射可以将服务对外暴露使用，但正常情况下一台宿主机不可能只通过docker对外暴露一个服务，然而服务端口有相同的，比如80或者443，这种情况我们可以通过Nginx的反向代理与端口转发来实现需求。</p><h4 id="Nginx安装"><a href="#Nginx安装" class="headerlink" title="Nginx安装"></a>Nginx安装</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 新建Nginx仓库地址</span><span class="token function">sudo</span> vim /etc/yum.repos.d/nginx.repo<span class="token comment" spellcheck="true"># 填入如下内容，保存退出</span><span class="token punctuation">[</span>nginx-stable<span class="token punctuation">]</span>name<span class="token operator">=</span>nginx stable repobaseurl<span class="token operator">=</span>http://nginx.org/packages/centos/<span class="token variable">$releasever</span>/<span class="token variable">$basearch</span>/gpgcheck<span class="token operator">=</span>1enabled<span class="token operator">=</span>1gpgkey<span class="token operator">=</span>https://nginx.org/keys/nginx_signing.keymodule_hotfixes<span class="token operator">=</span>true<span class="token punctuation">[</span>nginx-mainline<span class="token punctuation">]</span>name<span class="token operator">=</span>nginx mainline repobaseurl<span class="token operator">=</span>http://nginx.org/packages/mainline/centos/<span class="token variable">$releasever</span>/<span class="token variable">$basearch</span>/gpgcheck<span class="token operator">=</span>1enabled<span class="token operator">=</span>1gpgkey<span class="token operator">=</span>https://nginx.org/keys/nginx_signing.key<span class="token comment" spellcheck="true"># 使用yum方式安装nginx</span><span class="token function">sudo</span> yum -y <span class="token function">install</span> nginx<span class="token comment" spellcheck="true"># 启动nginx服务以及添加开机启动</span><span class="token function">sudo</span> systemctl start nginx <span class="token operator">&amp;&amp;</span> systemctl <span class="token function">enable</span> nginx</code></pre><h4 id="查看docker端口暴露"><a href="#查看docker端口暴露" class="headerlink" title="查看docker端口暴露"></a>查看docker端口暴露</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 此处我们以rsshub容器为例</span>docker <span class="token function">ps</span>CONTAINER ID   IMAGE           COMMAND              CREATED        STATUS                 PORTS                        NAMES4efac40036f2   diygod/rsshub <span class="token string">"dumb-init -- npm ru…"</span>   2 months ago   Up 19 hours   0.0.0.0:1200-<span class="token operator">></span>1200/tcp             rsshub</code></pre><p>经过查询，我们知道，rsshub容器当前1200端口与宿主机1200端口映射，外部通过访问宿主机的1200端口可以访问到容器内，我们现在的需求是通过访问宿主机的443端口从而访问到容器内的1200端口。</p><h4 id="通过acme签发ssl证书"><a href="#通过acme签发ssl证书" class="headerlink" title="通过acme签发ssl证书"></a>通过acme签发ssl证书</h4><p>因要通过443端口访问，所以我们还需要申请签发ssl证书，此处我们以acme申请签发并自动续期免费证书。</p><p>acme 安装</p><pre class=" language-bash"><code class="language-bash">curl https://get.acme.sh <span class="token operator">|</span> sh</code></pre><p>acme.sh 会安装到 <code>~/.acme.sh/</code>目录下，并创建新的自动计划（cronjob）在凌晨0点检查所有证书</p><p>证书生成的方式</p><ol><li><p>网站文件方式，适合于已经部署好<code>apache</code>或是<code>nginx</code>服务器的情况</p><pre class=" language-bash"><code class="language-bash">acme.sh  --issue  -d <span class="token operator">&lt;</span>域名<span class="token operator">></span>  --webroot  <span class="token operator">&lt;</span>网站根目录<span class="token operator">></span>acme.sh  --issue  -d demo.example.com  --webroot /home/wwwroot/demo.example.com/</code></pre></li><li><p>临时监听80端口方式，适合于没有部署好服务的服务器</p><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> socatacme.sh  --issue -d demo.example.com --standalone</code></pre></li><li><p>手动配置DNS，需要有手动配置DNS的权限，适合没有服务器或是不想更改服务器的情况</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 首先获得认证需要的解析记录</span>acme.sh --issue --dns -d demo.example.com<span class="token comment" spellcheck="true"># 然后在DNS服务商中添加记录,最后重新生成证书</span>acme.sh --renew -d demo.example.com<span class="token comment" spellcheck="true"># 使用这种方式 acme.sh 将无法自动更新证书，每次都需要手动再次重新解析验证域名所有权。</span></code></pre></li><li><p>自动方式</p><p>dns 方式的真正强大之处在于可以使用域名解析商提供的 api 自动添加 txt 记录完成验证,首先需要在云上申请有DNS配置权限的账号密码</p><p>以阿里云为例,在阿里云官网登录添加拥有DNS配置权限的子账户 <a href="https://ram.console.aliyun.com/overview">https://ram.console.aliyun.com/overview</a></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 配置阿里云API密钥，在/root/.acme.sh/account.conf 中添加aliyun API密钥</span><span class="token function">export</span> Ali_Key<span class="token operator">=</span><span class="token string">"AccessKeyId"</span><span class="token function">export</span> Ali_Secret<span class="token operator">=</span><span class="token string">"AccessKeySecret"</span><span class="token comment" spellcheck="true"># 颁发证书，支持单域名、多域名、泛域名进行颁发，证书生成目录位于~/.acme.sh/ 对应域名文件夹下</span><span class="token comment" spellcheck="true"># 进行域名的 DNS 验证，使用api自动添加解析,中间会等待20秒左右验证正确性，验证成功后会有成功标记。</span><span class="token function">sudo</span> acme.sh --issue --dns dns_ali -d xx.com -d *.xx.com --debug <span class="token comment" spellcheck="true">#开启日志，如有报错便于定位问题</span><span class="token punctuation">[</span>Thu Jul  1 09:56:55 CST 2021<span class="token punctuation">]</span> Lets <span class="token function">find</span> script dir.…… …… <span class="token comment" spellcheck="true">#中间省略中间</span>-----END CERTIFICATE-----<span class="token punctuation">[</span>Thu Jul  1 09:57:49 CST 2021<span class="token punctuation">]</span> Your cert is <span class="token keyword">in</span>  /root/.acme.sh/xx.com/xx.com.cer <span class="token punctuation">[</span>Thu Jul  1 09:57:49 CST 2021<span class="token punctuation">]</span> Your cert key is <span class="token keyword">in</span>  /root/.acme.sh/xx.com/xx.com.key <span class="token punctuation">[</span>Thu Jul  1 09:57:49 CST 2021<span class="token punctuation">]</span> The intermediate CA cert is <span class="token keyword">in</span>  /root/.acme.sh/xx.com/ca.cer <span class="token punctuation">[</span>Thu Jul  1 09:57:49 CST 2021<span class="token punctuation">]</span> And the full chain certs is there:  /root/.acme.sh/xx.com/fullchain.cer <span class="token punctuation">[</span>Thu Jul  1 09:57:49 CST 2021<span class="token punctuation">]</span> _on_issue_success<span class="token comment" spellcheck="true"># 直到出现以上，整个证书颁发完成</span><span class="token comment" spellcheck="true"># 个人喜好，将证书复制到单独目录，非必要操作</span><span class="token function">sudo</span> <span class="token function">cp</span> /root/.acme.sh/xx.com/*.cer /app/rsshub/ssl/<span class="token function">sudo</span> <span class="token function">cp</span> /root/.acme.sh/xx.com/*.key /app/rsshub/ssl/</code></pre></li></ol><h4 id="Nginx-修改默认配置"><a href="#Nginx-修改默认配置" class="headerlink" title="Nginx 修改默认配置"></a>Nginx 修改默认配置</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Nginx配置文件位于/etc/nginx/conf.d/default.conf</span>server<span class="token punctuation">{</span>    listen 80<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#监听80端口</span>    <span class="token comment" spellcheck="true">#listen [::]:80;</span>    server_name rss.xx.com<span class="token punctuation">;</span>    <span class="token keyword">return</span> 301 https://<span class="token variable">$host</span><span class="token variable">$request_uri</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#将80端口通过301跳转转发到443端口</span><span class="token punctuation">}</span>server<span class="token punctuation">{</span>    listen 443 ssl http2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#启用https也就是443端口</span>    server_name rss.xx.com<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#绑定的域名,需要先到域名控制台将域名解析到宿主机</span>    ssl_certificate /app/rsshub/ssl/xx.com.cer<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#证书存放路径,个人喜好,此处将证书复制到单独目录中</span>    ssl_certificate_key /app/rsshub/ssl/xx.com.key<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#证书存放路径,个人喜好,此处将证书复制到单独目录中</span>    ssl_session_timeout 5m<span class="token punctuation">;</span>    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:<span class="token operator">!</span>NULL:<span class="token operator">!</span>aNULL:<span class="token operator">!</span>MD5:<span class="token operator">!</span>ADH:<span class="token operator">!</span>RC4<span class="token punctuation">;</span>    ssl_protocols TLSv1 TLSv1.1 TLSv1.2<span class="token punctuation">;</span>    ssl_prefer_server_ciphers on<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#启用加密算法</span>    location / <span class="token punctuation">{</span>    proxy_set_header Host <span class="token variable">$http_host</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#代理设置</span>    proxy_pass http://127.0.0.1:1200<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#代理的地址与端口</span><span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 如还有其他容器需要映射添加的可直接复制一段server{}字段,按实际需要修改即可。</span>server<span class="token punctuation">{</span>    listen 80<span class="token punctuation">;</span>    server_name i.xx.com<span class="token punctuation">;</span>    <span class="token keyword">return</span> 301 https://<span class="token variable">$host</span><span class="token variable">$request_uri</span><span class="token punctuation">;</span><span class="token punctuation">}</span>server<span class="token punctuation">{</span>    listen 443 ssl http2<span class="token punctuation">;</span>      server_name i.xx.com<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true"># Specify SSL config if using a shared one.</span>      <span class="token comment" spellcheck="true">#include conf.d/ssl/ssl.conf;</span>      ssl_certificate  /app/bitwarden/data/cert/i.xx.com.cer<span class="token punctuation">;</span>      ssl_certificate_key /app/bitwarden/data/cert/i.xx.com.key<span class="token punctuation">;</span>       ssl_session_timeout 5m<span class="token punctuation">;</span>     ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:<span class="token operator">!</span>NULL:<span class="token operator">!</span>aNULL:<span class="token operator">!</span>MD5:<span class="token operator">!</span>ADH:<span class="token operator">!</span>RC4<span class="token punctuation">;</span>      ssl_protocols TLSv1 TLSv1.1 TLSv1.2<span class="token punctuation">;</span>     ssl_prefer_server_ciphers on<span class="token punctuation">;</span>     location / <span class="token punctuation">{</span>        proxy_set_header Host <span class="token variable">$http_host</span><span class="token punctuation">;</span>        proxy_pass http://127.0.0.1:8090<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h4><p>通过上述配置后，基本实现了通过nginx代理容器内服务需求，可以看到可以通过https访问，并查看证书当前状态一切正常。</p><p><img src="https://raw.githubusercontent.com/webpoplayer/netpic/main/img/20210701194830.png"></p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Nginx </tag>
            
            <tag> 多容器 </tag>
            
            <tag> 代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS hydra安装使用</title>
      <link href="/hydra.html"/>
      <url>/hydra.html</url>
      
        <content type="html"><![CDATA[<h3 id="CentOS-hydra安装使用"><a href="#CentOS-hydra安装使用" class="headerlink" title="CentOS hydra安装使用"></a>CentOS hydra安装使用</h3><p>hydra 是一个网络帐号破解工具，支持多种协议。其作者是van Hauser,David Maciejak与其共同维护。hydra在所有支持GCC的平台能很好的编译，包括Linux,所有版本的BSD,Mac OS, Solaris等。可以根据使用者指定的用户名字典文件,密码字典文件,目标IP列表来暴力破解目标系统登录用户与密码,并且支持多种协议以及并发连接。</p><p>项目地址:<a href="https://github.com/vanhauser-thc/thc-hydra">https://github.com/vanhauser-thc/thc-hydra</a></p><p>根据官方说明,可以在Linux,windows,mac等多平台使用</p><h4 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h4><ol><li><p>前往项目地址,下载最新版,上传到服务器</p><p><a href="https://github.com/vanhauser-thc/thc-hydra/releases/">https://github.com/vanhauser-thc/thc-hydra/releases/</a></p></li><li><p>依赖包安装</p><p>依赖包说明</p><p>以下是使用用Ubuntu / Debian系统时，可以安装的一些可选模块所需的补充库（将启用除Oracle，SAP R / 3，NCP和Apple归档协议之外的所有可选模块和功能） </p><p><code>apt-get install libssl-dev libssh-dev libidn11-dev libpcre3-dev \</code></p><p>​         <code>libgtk2.0-dev libmysqlclient-dev libpq-dev libsvn-dev \</code></p><p>​         <code>firebird-dev</code></p><p>对于所有其他Linux和基于BSD的系统，请使用系统软件安装程序并查找类似命名的库，如上面的命令所示。在所有其他情况下，您必须下载所有源库并手动编译它们。</p></li></ol><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#此处安装ssh,smb,rdp,telnet依赖</span>yum -y <span class="token function">install</span> gcc libssh-devel openssl-devel</code></pre><ol start="3"><li><p>编译安装</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#解压安装包,如没有unzip,请先执行安装unzip</span>yum -y <span class="token function">install</span> unzip <span class="token function">zip</span>unzip thc-hydra-9.2.tar.gz<span class="token comment" spellcheck="true">#进入解压目录</span><span class="token function">cd</span> thc-hydra-9.2<span class="token comment" spellcheck="true">#配置</span>./configure<span class="token comment" spellcheck="true">#执行make编译与安装</span><span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span></code></pre></li><li><p>安装完成</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#hydra测试执行</span>hydraHydra v9.2 <span class="token punctuation">(</span>c<span class="token punctuation">)</span> 2021 by van Hauser/THC <span class="token operator">&amp;</span> David Maciejak - Please <span class="token keyword">do</span> not use <span class="token keyword">in</span> military or secret <span class="token function">service</span> organizations, or <span class="token keyword">for</span> illegal purposes <span class="token punctuation">(</span>this is non-binding, these *** ignore laws and ethics anyway<span class="token punctuation">)</span>.Syntax: hydra <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span>-l LOGIN<span class="token operator">|</span>-L FILE<span class="token punctuation">]</span> <span class="token punctuation">[</span>-p PASS<span class="token operator">|</span>-P FILE<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">[</span>-C FILE<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>-e nsr<span class="token punctuation">]</span> <span class="token punctuation">[</span>-o FILE<span class="token punctuation">]</span> <span class="token punctuation">[</span>-t TASKS<span class="token punctuation">]</span> <span class="token punctuation">[</span>-M FILE <span class="token punctuation">[</span>-T TASKS<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>-w TIME<span class="token punctuation">]</span> <span class="token punctuation">[</span>-W TIME<span class="token punctuation">]</span> <span class="token punctuation">[</span>-f<span class="token punctuation">]</span> <span class="token punctuation">[</span>-s PORT<span class="token punctuation">]</span> <span class="token punctuation">[</span>-x MIN:MAX:CHARSET<span class="token punctuation">]</span> <span class="token punctuation">[</span>-c TIME<span class="token punctuation">]</span> <span class="token punctuation">[</span>-ISOuvVd46<span class="token punctuation">]</span> <span class="token punctuation">[</span>-m MODULE_OPT<span class="token punctuation">]</span> <span class="token punctuation">[</span>service://server<span class="token punctuation">[</span>:PORT<span class="token punctuation">]</span><span class="token punctuation">[</span>/OPT<span class="token punctuation">]</span><span class="token punctuation">]</span>Options:  -l LOGIN or -L FILE  login with LOGIN name, or load several logins from FILE  -p PASS  or -P FILE  try password PASS, or load several passwords from FILE  -C FILE   colon separated <span class="token string">"login:pass"</span> format, instead of -L/-P options  -M FILE   list of servers to attack, one entry per line, <span class="token string">':'</span> to specify port  -t TASKS  run TASKS number of connects <span class="token keyword">in</span> parallel per target <span class="token punctuation">(</span>default: 16<span class="token punctuation">)</span>  -U        <span class="token function">service</span> module usage details  -m OPT    options specific <span class="token keyword">for</span> a module, see -U output <span class="token keyword">for</span> information  -h        <span class="token function">more</span> <span class="token function">command</span> line options <span class="token punctuation">(</span>COMPLETE HELP<span class="token punctuation">)</span>  server    the target: DNS, IP or 192.168.0.0/24 <span class="token punctuation">(</span>this OR the -M option<span class="token punctuation">)</span>  <span class="token function">service</span>   the <span class="token function">service</span> to crack <span class="token punctuation">(</span>see below <span class="token keyword">for</span> supported protocols<span class="token punctuation">)</span>  OPT       some <span class="token function">service</span> modules support additional input <span class="token punctuation">(</span>-U <span class="token keyword">for</span> module help<span class="token punctuation">)</span>Supported services: adam6500 asterisk cisco cisco-enable cvs ftp<span class="token punctuation">[</span>s<span class="token punctuation">]</span> http<span class="token punctuation">[</span>s<span class="token punctuation">]</span>-<span class="token punctuation">{</span>head<span class="token operator">|</span>get<span class="token operator">|</span>post<span class="token punctuation">}</span> http<span class="token punctuation">[</span>s<span class="token punctuation">]</span>-<span class="token punctuation">{</span>get<span class="token operator">|</span>post<span class="token punctuation">}</span>-form http-proxy http-proxy-urlenum icq imap<span class="token punctuation">[</span>s<span class="token punctuation">]</span> irc ldap2<span class="token punctuation">[</span>s<span class="token punctuation">]</span> ldap3<span class="token punctuation">[</span>-<span class="token punctuation">{</span>cram<span class="token operator">|</span>digest<span class="token punctuation">}</span>md5<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">]</span> mssql mysql<span class="token punctuation">(</span>v4<span class="token punctuation">)</span> nntp oracle-listener oracle-sid pcanywhere pcnfs pop3<span class="token punctuation">[</span>s<span class="token punctuation">]</span> rdp redis rexec rlogin rpcap rsh rtsp s7-300 sip smb smtp<span class="token punctuation">[</span>s<span class="token punctuation">]</span> smtp-enum snmp socks5 <span class="token function">ssh</span> sshkey teamspeak telnet<span class="token punctuation">[</span>s<span class="token punctuation">]</span> vmauthd vnc xmppHydra is a tool to guess/crack valid login/password pairs.Licensed under AGPL v3.0. The newest version is always available at<span class="token punctuation">;</span>https://github.com/vanhauser-thc/thc-hydraPlease don't use <span class="token keyword">in</span> military or secret <span class="token function">service</span> organizations, or <span class="token keyword">for</span> illegalpurposes. <span class="token punctuation">(</span>This is a wish and non-binding - <span class="token function">most</span> such people <span class="token keyword">do</span> not care aboutlaws and ethics anyway - and tell themselves they are one of the good ones.<span class="token punctuation">)</span>Example:  hydra -l user -P passlist.txt ftp://192.168.0.1<span class="token comment" spellcheck="true">#如执行hydra说明安装完成</span></code></pre></li></ol><h4 id="语法选项"><a href="#语法选项" class="headerlink" title="语法选项"></a>语法选项</h4><p><strong>语法</strong></p><pre class=" language-bash"><code class="language-bash">hydra <span class="token punctuation">[</span>some <span class="token function">command</span> line options<span class="token punctuation">]</span> <span class="token punctuation">[</span>-s PORT<span class="token punctuation">]</span> TARGET PROTOCOL <span class="token punctuation">[</span>MODULE-OPTIONS<span class="token punctuation">]</span>hydra <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span>-l LOGIN<span class="token operator">|</span>-L FILE<span class="token punctuation">]</span> <span class="token punctuation">[</span>-p PASS<span class="token operator">|</span>-P FILE<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">[</span>-C FILE<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>-e nsr<span class="token punctuation">]</span> <span class="token punctuation">[</span>-o FILE<span class="token punctuation">]</span> <span class="token punctuation">[</span>-t TASKS<span class="token punctuation">]</span> <span class="token punctuation">[</span>-M FILE<span class="token punctuation">]</span></code></pre><p><strong>常用选项</strong></p><table><thead><tr><th align="left">选项</th><th align="left">说明</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left">-h</td><td align="left">查看所有可用的命令行选项</td><td align="left">hydra -h</td></tr><tr><td align="left">-U</td><td align="left">检查模块是否具有可选参数</td><td align="left">hydra -U smb</td></tr><tr><td align="left">-l</td><td align="left">指定用户名</td><td align="left">-l zhangsan</td></tr><tr><td align="left">-p</td><td align="left">指定密码</td><td align="left">-p 123456</td></tr><tr><td align="left">-C</td><td align="left">使用冒号分隔的user:passwd格式，而不是-l/-p</td><td align="left">-C zhangsan:123456</td></tr><tr><td align="left">-L</td><td align="left">指定用户名字典文件</td><td align="left">-L /root/user.dict</td></tr><tr><td align="left">-P</td><td align="left">指定密码字典文件</td><td align="left">-P /root/passwd.dict</td></tr><tr><td align="left">-M</td><td align="left">指定目标IP列表文件</td><td align="left">-M /root/ip.dict</td></tr><tr><td align="left">-e</td><td align="left">尝试“尝试登录为密码”和“空密码”</td><td align="left">-e ns</td></tr></tbody></table><h4 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h4><p><strong>指定用户名、密码字典及IP列表破解</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 如下所示命令各选项含义：-L指定用户名字典文件、-P指定密码字典文件、-M指定ip列表文件(非标准端口的主机可以加冒号分隔指定端口)、-o指定计算结果以文本格式输出到results.txt文件中、-vV显示详细计算过程信息、-t指定线程为20、-e ns尝试使用空密码和单密码登录、指定使用模块为ssh。</span>hydra -L /root/user.dict -P /root/passwd.dict -M ip.dict -o /root/results.txt -vV -t 20 -e ns <span class="token function">ssh</span></code></pre><p><strong>使用smb模块暴力破解windows服务器登录密码</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#使用指定用户名,密码rdp爆破指定ip地址</span>hydra -l administrator -p passwd1<span class="token operator">!</span>  172.16.252.110 rdp<span class="token comment" spellcheck="true">#使用指定用户名,指定密码字典rdp爆破指定设备</span>hydra -l administrator -P 1.txt rdp://xx.xx.xx.xx -t 1 -V</code></pre><p><strong>补充安装模块需要的依赖包</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#假如有个模块我们因为之前不需要用到或忘记安装导致没有其需要的依赖包，那么使用这个模块的时候就会报依赖包错误：[ERROR] Compiled without FREERDP support, module not available!</span>hydra -l adminstrator -p passwd1<span class="token operator">!</span> rdp://172.16.252.110 -t 1 -VHydra v9.2-dev <span class="token punctuation">(</span>c<span class="token punctuation">)</span> 2021 by van Hauser/THC - Please <span class="token keyword">do</span> not use <span class="token keyword">in</span> military or secret <span class="token function">service</span> organizations, or <span class="token keyword">for</span> illegal purposes.Hydra <span class="token punctuation">(</span>https://github.com/vanhauser-thc/thc-hydra<span class="token punctuation">)</span> starting at 2021-05-28 16:11:20<span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span> Compiled without FREERDP support, module not available<span class="token operator">!</span><span class="token comment" spellcheck="true">#需安装依赖,再执行编译安装hydra即可</span>yum -y <span class="token function">install</span> freerdp*<span class="token function">cd</span> thc-hydra-9.2./configure<span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Hydra </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> hydra </tag>
            
            <tag> 爆破工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubeadm方式部署Kubernetes集群</title>
      <link href="/kubeadm-buid-k8s.html"/>
      <url>/kubeadm-buid-k8s.html</url>
      
        <content type="html"><![CDATA[<h3 id="Kubeadm方式部署Kubernetes集群"><a href="#Kubeadm方式部署Kubernetes集群" class="headerlink" title="Kubeadm方式部署Kubernetes集群"></a>Kubeadm方式部署Kubernetes集群</h3><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><p>预先安装好3台主机,需要有上网权限,此处为VM,与主机网络模式为NAT</p><table><thead><tr><th>HostName</th><th align="center">OS</th><th align="center">IP</th></tr></thead><tbody><tr><td>k8s-master</td><td align="center">CentOS Linux release 7.9.2009 (Core)</td><td align="center">172.16.252.88</td></tr><tr><td>k8s-node1</td><td align="center">CentOS Linux release 7.9.2009 (Core)</td><td align="center">172.16.252.89</td></tr><tr><td>k8s-node2</td><td align="center">CentOS Linux release 7.9.2009 (Core)</td><td align="center">172.16.252.90</td></tr></tbody></table><blockquote><p>所有节点均需要设置</p></blockquote><ol><li><p>关闭 主机防火墙</p><pre class=" language-bash"><code class="language-bash">systemctl stop firewalldsystemctl disable firewalld</code></pre></li><li><p>关闭SELinux</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sed</span> -i <span class="token string">'s/enforcing/disabled/'</span> /etc/selinux/config <span class="token comment" spellcheck="true">#永久关闭</span>setenforce 0 <span class="token comment" spellcheck="true">#临时关闭</span></code></pre></li><li><p>关闭swap分区</p><pre class=" language-bash"><code class="language-bash">swapoff -a <span class="token comment" spellcheck="true">#临时关闭</span><span class="token function">sed</span> -ri <span class="token string">'s/.*swap.* /#&amp;/'</span> /etc/fstab #永久关闭</code></pre></li><li><p>设置主机名</p><pre class=" language-bash"><code class="language-bash">hostnamectl set-hostname <span class="token punctuation">[</span>hostname<span class="token punctuation">]</span></code></pre></li><li><p>在<code>master</code>节点中添加hosts</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">>></span> /etc/hosts <span class="token operator">&lt;&lt;</span><span class="token string">EOF172.16.252.88 k8s-master172.16.252.89 k8s-node1172.16.252.90 k8s-node2EOF</span></code></pre></li><li><p>将桥接的网卡流量传到iptables</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">></span> /etc/sysctl.d/k8s.conf <span class="token operator">&lt;&lt;</span><span class="token string">EOFnet.bridge.bridge-nf-call-ip6tables = 1net.bridge.bridge-nf-call-iptables = 1EOF</span>sysctl --system <span class="token comment" spellcheck="true">#生效</span></code></pre></li><li><p>时间同步</p><pre class=" language-bash"><code class="language-bash">yum -y <span class="token function">install</span> ntpdatentpdate time.windows.com</code></pre></li></ol><h4 id="所有节点安装Docker-Kubeadm-Kublet"><a href="#所有节点安装Docker-Kubeadm-Kublet" class="headerlink" title="所有节点安装Docker/Kubeadm/Kublet"></a>所有节点安装Docker/Kubeadm/Kublet</h4><ol><li><p>安装Docker</p><pre class=" language-bash"><code class="language-bash"><span class="token function">wget</span> https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repoyum -y <span class="token function">install</span> yum -y <span class="token function">install</span> docker-ce-20.10.6-3.el7.x86_64systemctl <span class="token function">enable</span> docker <span class="token operator">&amp;&amp;</span> systemctl start docker<span class="token comment" spellcheck="true">#配置镜像加速器</span><span class="token function">cat</span> <span class="token operator">></span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;</span> EOF<span class="token punctuation">{</span><span class="token string">"registry-mirrors"</span>:<span class="token punctuation">[</span>https://kod2rnzj.mirror.aliyuncs.com<span class="token punctuation">]</span><span class="token punctuation">}</span>systemctl restart docker</code></pre></li><li><p>添加阿里云YUM源</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#可用</span><span class="token function">cat</span> <span class="token operator">></span> /etc/yum.repos.d/kubeadm.repo <span class="token operator">&lt;&lt;</span> <span class="token string">EOF [kubernetes] name=Kubernetes baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64enabled=1 gpgcheck=0 repo_gpgcheck=0 gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg EOF</span></code></pre></li><li><p>Kubeadm/Kubelet/Kubectl 安装</p><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> -y kubelet-1.20.1 kubeadm-1.20.1 kubectl-1.20.1systemctl <span class="token function">enable</span> kubelet</code></pre></li></ol><h4 id="部署Kubernetes-Master"><a href="#部署Kubernetes-Master" class="headerlink" title="部署Kubernetes Master"></a>部署Kubernetes Master</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#master节点部署</span>kubeadm init --apiserver-advertise-address<span class="token operator">=</span>172.16.252.88 --image-repository registry.aliyuncs.com/google_containers --kubernetes-version v1.20.1 --service-cidr<span class="token operator">=</span>10.96.0.0/12 --pod-network-cidr<span class="token operator">=</span>10.244.0.0/16 <span class="token comment" spellcheck="true">#拉取Kubernetes 核心组件apiserver,contorll,etcd,proxy,pause,coredns,scheduller 镜像</span><span class="token comment" spellcheck="true">#配置Kubernetes master</span><span class="token function">mkdir</span> -p <span class="token variable">$HOME</span>/.kube<span class="token function">cp</span> -i /etc/kubernetes/admin.conf <span class="token variable">$HOME</span>/.kube/config<span class="token function">chown</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> -u<span class="token variable">)</span></span> <span class="token variable">$HOME</span>/.kube/config<span class="token function">chown</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> -g<span class="token variable">)</span></span> <span class="token variable">$HOME</span>/.kube/configkubectl get nodes <span class="token comment" spellcheck="true">#查看集群节点</span></code></pre><h4 id="node节点加入集群"><a href="#node节点加入集群" class="headerlink" title="node节点加入集群"></a>node节点加入集群</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#node节点加入集群</span>kubeadm <span class="token function">join</span> 172.16.252.88:6443 --token xxx.xxxxxxxxxxx \ <span class="token comment" spellcheck="true">#随机生成token</span>    --discovery-token-ca-cert-hash sha256 xxxxxxxxxxxxxxx<span class="token comment" spellcheck="true">#默认token有效期为24小时,过期后需重新创建token</span>kubeadm token create --print-join-command</code></pre><h4 id="部署CNI网络插件"><a href="#部署CNI网络插件" class="headerlink" title="部署CNI网络插件"></a>部署CNI网络插件</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#github地址</span><span class="token function">wget</span> https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml<span class="token comment" spellcheck="true">#应用flannel生成</span>kubectl apply -f kube-flannel.yml <span class="token comment" spellcheck="true">#检查kube-system系统命名空间内组件</span>kubectl get pods -n kube-system</code></pre><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># kube-flannel.yml 内容</span><span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> policy/v1beta1<span class="token key atrule">kind</span><span class="token punctuation">:</span> PodSecurityPolicy<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> psp.flannel.unprivileged  <span class="token key atrule">annotations</span><span class="token punctuation">:</span>    <span class="token key atrule">seccomp.security.alpha.kubernetes.io/allowedProfileNames</span><span class="token punctuation">:</span> docker/default    <span class="token key atrule">seccomp.security.alpha.kubernetes.io/defaultProfileName</span><span class="token punctuation">:</span> docker/default    <span class="token key atrule">apparmor.security.beta.kubernetes.io/allowedProfileNames</span><span class="token punctuation">:</span> runtime/default    <span class="token key atrule">apparmor.security.beta.kubernetes.io/defaultProfileName</span><span class="token punctuation">:</span> runtime/default<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> configMap  <span class="token punctuation">-</span> secret  <span class="token punctuation">-</span> emptyDir  <span class="token punctuation">-</span> hostPath  <span class="token key atrule">allowedHostPaths</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">pathPrefix</span><span class="token punctuation">:</span> <span class="token string">"/etc/cni/net.d"</span>  <span class="token punctuation">-</span> <span class="token key atrule">pathPrefix</span><span class="token punctuation">:</span> <span class="token string">"/etc/kube-flannel"</span>  <span class="token punctuation">-</span> <span class="token key atrule">pathPrefix</span><span class="token punctuation">:</span> <span class="token string">"/run/flannel"</span>  <span class="token key atrule">readOnlyRootFilesystem</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment" spellcheck="true"># Users and groups</span>  <span class="token key atrule">runAsUser</span><span class="token punctuation">:</span>    <span class="token key atrule">rule</span><span class="token punctuation">:</span> RunAsAny  <span class="token key atrule">supplementalGroups</span><span class="token punctuation">:</span>    <span class="token key atrule">rule</span><span class="token punctuation">:</span> RunAsAny  <span class="token key atrule">fsGroup</span><span class="token punctuation">:</span>    <span class="token key atrule">rule</span><span class="token punctuation">:</span> RunAsAny  <span class="token comment" spellcheck="true"># Privilege Escalation</span>  <span class="token key atrule">allowPrivilegeEscalation</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">defaultAllowPrivilegeEscalation</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment" spellcheck="true"># Capabilities</span>  <span class="token key atrule">allowedCapabilities</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'NET_ADMIN'</span><span class="token punctuation">,</span> <span class="token string">'NET_RAW'</span><span class="token punctuation">]</span>  <span class="token key atrule">defaultAddCapabilities</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token key atrule">requiredDropCapabilities</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># Host namespaces</span>  <span class="token key atrule">hostPID</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">hostIPC</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">hostNetwork</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">hostPorts</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">min</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token key atrule">max</span><span class="token punctuation">:</span> <span class="token number">65535</span>  <span class="token comment" spellcheck="true"># SELinux</span>  <span class="token key atrule">seLinux</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># SELinux is unused in CaaSP</span>    <span class="token key atrule">rule</span><span class="token punctuation">:</span> <span class="token string">'RunAsAny'</span><span class="token punctuation">---</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRole<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> flannel<span class="token key atrule">rules</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'extensions'</span><span class="token punctuation">]</span>  <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'podsecuritypolicies'</span><span class="token punctuation">]</span>  <span class="token key atrule">verbs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'use'</span><span class="token punctuation">]</span>  <span class="token key atrule">resourceNames</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'psp.flannel.unprivileged'</span><span class="token punctuation">]</span><span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token string">""</span>  <span class="token key atrule">resources</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> pods  <span class="token key atrule">verbs</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> get<span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token string">""</span>  <span class="token key atrule">resources</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> nodes  <span class="token key atrule">verbs</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> list  <span class="token punctuation">-</span> watch<span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token string">""</span>  <span class="token key atrule">resources</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> nodes/status  <span class="token key atrule">verbs</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> patch<span class="token punctuation">---</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRoleBinding<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> flannel<span class="token key atrule">roleRef</span><span class="token punctuation">:</span>  <span class="token key atrule">apiGroup</span><span class="token punctuation">:</span> rbac.authorization.k8s.io  <span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRole  <span class="token key atrule">name</span><span class="token punctuation">:</span> flannel<span class="token key atrule">subjects</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceAccount  <span class="token key atrule">name</span><span class="token punctuation">:</span> flannel  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> kube<span class="token punctuation">-</span>system<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceAccount<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> flannel  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> kube<span class="token punctuation">-</span>system<span class="token punctuation">---</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> ConfigMap<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> kube<span class="token punctuation">-</span>flannel<span class="token punctuation">-</span>cfg  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> kube<span class="token punctuation">-</span>system  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">tier</span><span class="token punctuation">:</span> node    <span class="token key atrule">app</span><span class="token punctuation">:</span> flannel<span class="token key atrule">data</span><span class="token punctuation">:</span>  <span class="token key atrule">cni-conf.json</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">    {      "name": "cbr0",      "cniVersion": "0.3.1",      "plugins": [        {          "type": "flannel",          "delegate": {            "hairpinMode": true,            "isDefaultGateway": true          }        },        {          "type": "portmap",          "capabilities": {            "portMappings": true          }        }      ]    }</span>  <span class="token key atrule">net-conf.json</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">    {      "Network": "10.244.0.0/16",      "Backend": {        "Type": "vxlan"      }    }</span><span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> DaemonSet<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> kube<span class="token punctuation">-</span>flannel<span class="token punctuation">-</span>ds  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> kube<span class="token punctuation">-</span>system  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">tier</span><span class="token punctuation">:</span> node    <span class="token key atrule">app</span><span class="token punctuation">:</span> flannel<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> flannel  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">tier</span><span class="token punctuation">:</span> node        <span class="token key atrule">app</span><span class="token punctuation">:</span> flannel    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">affinity</span><span class="token punctuation">:</span>        <span class="token key atrule">nodeAffinity</span><span class="token punctuation">:</span>          <span class="token key atrule">requiredDuringSchedulingIgnoredDuringExecution</span><span class="token punctuation">:</span>            <span class="token key atrule">nodeSelectorTerms</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> <span class="token key atrule">matchExpressions</span><span class="token punctuation">:</span>              <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> kubernetes.io/os                <span class="token key atrule">operator</span><span class="token punctuation">:</span> In                <span class="token key atrule">values</span><span class="token punctuation">:</span>                <span class="token punctuation">-</span> linux      <span class="token key atrule">hostNetwork</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">priorityClassName</span><span class="token punctuation">:</span> system<span class="token punctuation">-</span>node<span class="token punctuation">-</span>critical      <span class="token key atrule">tolerations</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">operator</span><span class="token punctuation">:</span> Exists        <span class="token key atrule">effect</span><span class="token punctuation">:</span> NoSchedule      <span class="token key atrule">serviceAccountName</span><span class="token punctuation">:</span> flannel      <span class="token key atrule">initContainers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> install<span class="token punctuation">-</span>cni        <span class="token key atrule">image</span><span class="token punctuation">:</span> quay.io/coreos/flannel<span class="token punctuation">:</span>v0.14.0<span class="token punctuation">-</span>rc1        <span class="token key atrule">command</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> cp        <span class="token key atrule">args</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token punctuation">-</span>f        <span class="token punctuation">-</span> /etc/kube<span class="token punctuation">-</span>flannel/cni<span class="token punctuation">-</span>conf.json        <span class="token punctuation">-</span> /etc/cni/net.d/10<span class="token punctuation">-</span>flannel.conflist        <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> cni          <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /etc/cni/net.d        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> flannel<span class="token punctuation">-</span>cfg          <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /etc/kube<span class="token punctuation">-</span>flannel/      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> kube<span class="token punctuation">-</span>flannel        <span class="token key atrule">image</span><span class="token punctuation">:</span> quay.io/coreos/flannel<span class="token punctuation">:</span>v0.14.0<span class="token punctuation">-</span>rc1        <span class="token key atrule">command</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> /opt/bin/flanneld        <span class="token key atrule">args</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>ip<span class="token punctuation">-</span>masq        <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>kube<span class="token punctuation">-</span>subnet<span class="token punctuation">-</span>mgr        <span class="token key atrule">resources</span><span class="token punctuation">:</span>          <span class="token key atrule">requests</span><span class="token punctuation">:</span>            <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token string">"100m"</span>            <span class="token key atrule">memory</span><span class="token punctuation">:</span> <span class="token string">"50Mi"</span>          <span class="token key atrule">limits</span><span class="token punctuation">:</span>            <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token string">"100m"</span>            <span class="token key atrule">memory</span><span class="token punctuation">:</span> <span class="token string">"50Mi"</span>        <span class="token key atrule">securityContext</span><span class="token punctuation">:</span>          <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>          <span class="token key atrule">capabilities</span><span class="token punctuation">:</span>            <span class="token key atrule">add</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"NET_ADMIN"</span><span class="token punctuation">,</span> <span class="token string">"NET_RAW"</span><span class="token punctuation">]</span>        <span class="token key atrule">env</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> POD_NAME          <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span>            <span class="token key atrule">fieldRef</span><span class="token punctuation">:</span>              <span class="token key atrule">fieldPath</span><span class="token punctuation">:</span> metadata.name        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> POD_NAMESPACE          <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span>            <span class="token key atrule">fieldRef</span><span class="token punctuation">:</span>              <span class="token key atrule">fieldPath</span><span class="token punctuation">:</span> metadata.namespace        <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> run          <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /run/flannel        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> flannel<span class="token punctuation">-</span>cfg          <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /etc/kube<span class="token punctuation">-</span>flannel/      <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> run        <span class="token key atrule">hostPath</span><span class="token punctuation">:</span>          <span class="token key atrule">path</span><span class="token punctuation">:</span> /run/flannel      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> cni        <span class="token key atrule">hostPath</span><span class="token punctuation">:</span>          <span class="token key atrule">path</span><span class="token punctuation">:</span> /etc/cni/net.d      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> flannel<span class="token punctuation">-</span>cfg        <span class="token key atrule">configMap</span><span class="token punctuation">:</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> kube<span class="token punctuation">-</span>flannel<span class="token punctuation">-</span>cfg</code></pre><h4 id="测试K8s集群"><a href="#测试K8s集群" class="headerlink" title="测试K8s集群"></a>测试K8s集群</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#查看集群状态</span>kubectl get nodesNAME         STATUS     ROLES                  AGE   VERSIONk8s-master   Ready      control-plane,master   48m   v1.20.1k8s-node1    Ready      <span class="token operator">&lt;</span>none<span class="token operator">></span>                 39m   v1.20.1k8s-node2    Ready      <span class="token operator">&lt;</span>none<span class="token operator">></span>                 37m   v1.20.1</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#查看集群内容器分布状态以及集群内服务状态</span>kubectl get pods,svc -n kube-system -o wideNAME                                     READY   STATUS                  RESTARTS   AGE   IP              NODE         NOMINATED NODE   READINESS GATESpod/coredns-7f89b7bc75-5b47p             1/1     Running                 0          50m   10.244.0.3      k8s-master   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>pod/coredns-7f89b7bc75-ncpds             1/1     Running                 0          50m   10.244.0.2      k8s-master   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>pod/etcd-k8s-master                      1/1     Running                 0          50m   172.16.252.88   k8s-master   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>pod/kube-apiserver-k8s-master            1/1     Running                 0          50m   172.16.252.88   k8s-master   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>pod/kube-controller-manager-k8s-master   1/1     Running                 0          50m   172.16.252.88   k8s-master   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>pod/kube-flannel-ds-49pjb                1/1     Running                 0          17m   172.16.252.88   k8s-master   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>pod/kube-flannel-ds-ktpfk                0/1     Init:ImagePullBackOff   0          17m   172.16.252.90   k8s-node2    <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>pod/kube-flannel-ds-zpvmw                0/1     Init:0/1                0          17m   172.16.252.89   k8s-node1    <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>pod/kube-proxy-29n6x                     1/1     Running                 0          50m   172.16.252.88   k8s-master   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>pod/kube-proxy-nbvqf                     1/1     Running                 0          42m   172.16.252.89   k8s-node1    <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>pod/kube-proxy-x7lbt                     1/1     Running                 0          39m   172.16.252.90   k8s-node2    <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>pod/kube-scheduler-k8s-master            1/1     Running                 0          50m   172.16.252.88   k8s-master   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>NAME               TYPE        CLUSTER-IP   EXTERNAL-IP   PORT<span class="token punctuation">(</span>S<span class="token punctuation">)</span>                  AGE   SELECTORservice/kube-dns   ClusterIP   10.96.0.10   <span class="token operator">&lt;</span>none<span class="token operator">></span>        53/UDP,53/TCP,9153/TCP   50m   k8s-app<span class="token operator">=</span>kube-dns</code></pre><p>在Kubernetes集群中创建一个pod,验证是否运行正常</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#创建并部署一个pod命名为nginx,使用nginx镜像</span>kubectl create depoloyment nginx --image<span class="token operator">=</span>nginx<span class="token comment" spellcheck="true">#暴露nginx端口为80,模式为节点端口,默认内部容器节点为30000~32767</span>kubectl expose deployment nginx --port<span class="token operator">=</span>80 --type<span class="token operator">=</span>NodePort<span class="token comment" spellcheck="true">#查看pod状态以及svc状态</span>kubectl get pod,svc<span class="token comment" spellcheck="true">#使用http://K8s任意节点ip:port访问</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
            <tag> 部署 </tag>
            
            <tag> kubeadm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bitwarden 迁移</title>
      <link href="/rebuild-bit.html"/>
      <url>/rebuild-bit.html</url>
      
        <content type="html"><![CDATA[<h4 id="Bitwarden-迁移"><a href="#Bitwarden-迁移" class="headerlink" title="Bitwarden 迁移"></a>Bitwarden 迁移</h4><blockquote><p>去年年中的时候使用docker搭建了一个Bitwarden 私有密码管理系统,自己一直在用着,那时候撸的腾讯云的一个学生机,刚好到下个月就到期,续费的话要一大笔支出,鉴于自己已有买一台HK的vps,物美价廉,一次性购买时间比较长,就想着把原先在腾讯云上的环境迁移过去</p></blockquote><ul><li><p>登录到腾讯云主机,查看之前的docker-compose文件,看之前的配置</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">cd</span> /data/bitwarden/<span class="token function">sudo</span>  lltotal 12-rw-r--r-- 1 root root  124 Mar 30 21:04 config.envdrwxr-xr-x 3 root root 4096 Mar 30 22:09 data-rw-r--r-- 1 root root  219 Oct  4 18:10 docker-compose.yml</code></pre><p>查看docker-compose.yml文件</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">bitwarden</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> mprasil/bitwarden<span class="token punctuation">:</span>latest    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> bitwarden    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./data<span class="token punctuation">:</span>/data    <span class="token key atrule">env_file</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> config.env    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"1024:80"</span></code></pre><p>从docker-compose文件中可以看到当前目录下的<code>data</code>目录持续保存着所有的数据,<code>config.env</code>保存着启动bitwarden容器的配置信息,所以我们可以直接简单粗暴的,把整个<code>bitwarden</code> 打包带走,再到新服务器上启动容器就搞定</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span>  lltotal 8drwxr-xr-x 3 root root 4096 Mar 30 21:04 bitwardendrwxr-xr-x 4 root root 4096 Nov  6 14:30 spug<span class="token function">sudo</span> <span class="token function">tar</span> -cvf bitwarden.tar bitwarden/<span class="token punctuation">..</span>. <span class="token punctuation">..</span>.<span class="token function">sudo</span>  lltotal 728drwxr-xr-x 3 root root   4096 Mar 30 21:04 bitwarden-rw-r--r-- 1 root root 737280 Mar 31 17:16 bitwarden.tar</code></pre></li></ul><p>打包出来的tar文件,通过sz或者ftp方法下载到本地,再上传到新服务器上,执行解压</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">sudo</span> <span class="token function">mkdir</span> bitwarden   <span class="token function">sudo</span> <span class="token function">tar</span> -zxvf bitwarden  <span class="token function">sudo</span> ll  total 12  -rw-r--r-- 1 root root  128 Mar 31 11:40 config.env  drwxr-xr-x 3 root root 4096 Mar 31 14:53 data  -rw-r--r-- 1 root root  249 Mar 31 11:40 docker-compose.yml</code></pre><p>查看是否需要改动,如不需要改动,就可以直接通过docker-compose 编排启动容器了</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">sudo</span> docker-compose build <span class="token operator">&amp;&amp;</span> docker-compose up -d  bitwarden uses an image, skipping  Creating network <span class="token string">"bitwarden_default"</span> with the default driver  Creating bitwarden <span class="token punctuation">..</span>. <span class="token keyword">done</span>  docker <span class="token function">ps</span> <span class="token operator">|</span> <span class="token function">grep</span> bitwa  f41686786960        docker.io/webpoplayer/bitwarden:latest   <span class="token string">"./bitwarden_rs"</span>         5 hours ago         Up 3 hours          0.0.0.0:80-<span class="token operator">></span>80/tcp, 0.0.0.0:443-<span class="token operator">></span>443/tcp, 3012/tcp   bitwarden</code></pre><p>容器启动后,在通过网页登录可以正常使用,最后再到Edge浏览器安装插件,玩活,搞定,又水一篇。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> bitwarden </tag>
            
            <tag> 迁移 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker容器日志清理</title>
      <link href="/cleanDocker-logs.html"/>
      <url>/cleanDocker-logs.html</url>
      
        <content type="html"><![CDATA[<h4 id="Docker容器日志清理"><a href="#Docker容器日志清理" class="headerlink" title="Docker容器日志清理"></a>Docker容器日志清理</h4><p>docker容器导致主机磁盘空间满了</p><p>如何清理Docker容器日志？</p><p>如何找出docker容器日志文件</p><p>容器日志一般存放在/var/lib/docker下面，可使用如下命令查看各个日志的文件大小</p><pre class=" language-shell"><code class="language-shell">ls -lh $(find /var/lib/docker/containers/ -name *-json.log)</code></pre><p>如何清理日志</p><p>如果docker容器正在运行，那么使用rm -rf 方式删除日志后，通过df -h会发现磁盘空间并没有释放</p><p>原因：在Linux或者Unix系统中，通过rm或者文件管理器删除文件将会从文件系统的目录结构上解除链接(unlink).然而如果文件是被打开的（有一个进程正在使用），那么进程将仍然可以读取该文件，磁盘空间也一直被占用</p><p>正确姿势是cat /dev/null &gt; *-json.log，当然你也可以通过rm删除后重启docker</p><p>清理脚本：</p><pre class=" language-shell"><code class="language-shell">#!/bin/shecho "==================== start clean docker containers logs =========================="logs=$(find /var/lib/docker/containers/ -name *-json.log)for log in $logs        do                echo "clean logs : $log"                cat /dev/null > $log        doneecho "==================== end clean docker containers logs   =========================="</code></pre><blockquote><p>参考地址：<a href="https://blog.csdn.net/xunzhaoyao/article/details/72959917">Docker容器日志清理_xunzhaoyao的专栏-CSDN博客_docker 日志清理</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>说说</title>
      <link href="/talked01.html"/>
      <url>/talked01.html</url>
      
        <content type="html"><![CDATA[<p>“愿世间所有美好都能恰逢其时。”</p><p>“美丽胜于丑陋。<br>显式胜于隐式。<br>简单胜于复杂。<br>复杂胜于复杂。”</p><p>向左一步，向前一步？</p>]]></content>
      
      
      <categories>
          
          <category> 自说自话 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 说一说 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora搭配Github图床撰写文档</title>
      <link href="/Typora-netpic.html"/>
      <url>/Typora-netpic.html</url>
      
        <content type="html"><![CDATA[<p>自习惯了用Typora写md格式文档之后，一直就觉得其他工具写文档再也不香了，习惯了md码字后，感觉其他都是渣渣了，就是有一点，默认在md中插入图片的时候，Typora引用的图片地址是当前主机绝对路径，这就出现了，当把md格式的文档复制到其他电脑或发送给其他人看的时候往往会看不到图片，这个就很麻烦了，虽然可以直接导出PDF档案，可偶尔还是需要放到另一台电脑去编辑内容，这个时候就显得很苍白无力了，为了解决这个问题，就产生了搭建图床的想法，如下为具体操作，搭建其实比较简单，也有很多方式，此处以Github+PicGo实现。</p><h4 id="0x01-Github新建仓库"><a href="#0x01-Github新建仓库" class="headerlink" title="0x01 Github新建仓库"></a>0x01 Github新建仓库</h4><p>在github中新建仓库，勾选添加README文件，有文件了，后面才能查看分支，或者新建好仓库后面手动再上传一个文件也可以。</p><p><img src="https://raw.githubusercontent.com/webpoplayer/netpic/main/img/20210118211624.png" alt="image-20210118211624712"></p><h4 id="0x02-Personal-access-token创建"><a href="#0x02-Personal-access-token创建" class="headerlink" title="0x02 Personal access token创建"></a>0x02 <strong>Personal access token创建</strong></h4><p>点击github头像–Settings– Developer settings–Personal access tokens，创建一个新的tokens，勾选repo，拉到最后面创建。</p><p><img src="https://raw.githubusercontent.com/webpoplayer/netpic/main/img/20210118211712.png" alt="image-20210118211712303"></p><p><img src="https://raw.githubusercontent.com/webpoplayer/netpic/main/img/20210118211735.png" alt="image-20210118211735414"></p><p>点击创建后，此处会显示token，先复制贴到其他地方去，后面用得上，此处只会显示这一次。</p><p><img src="https://raw.githubusercontent.com/webpoplayer/netpic/main/img/20210118211802.png" alt="image-20210118211802050"></p><h4 id="0x03-PicGo下载安装"><a href="#0x03-PicGo下载安装" class="headerlink" title="0x03 PicGo下载安装"></a>0x03 PicGo下载安装</h4><p>PicGo下载地址：</p><p><a href="https://github.com/Molunerfinn/PicGo/releases/download/v2.3.0-beta.3/PicGo-Setup-2.3.0-beta.3.exe">https://github.com/Molunerfinn/PicGo/releases/download/v2.3.0-beta.3/PicGo-Setup-2.3.0-beta.3.exe</a></p><p>下载后一路下一步，无脑安装，安装完成后，点击图床设置</p><p><img src="https://raw.githubusercontent.com/webpoplayer/netpic/main/img/20210118211846.png" alt="image-20210118211846582"></p><p>仓库名：github账号/刚新建的仓库名</p><p>设定分支名：master或main 具体到github仓库中查看此处</p><p><img src="https://raw.githubusercontent.com/webpoplayer/netpic/main/img/20210118211943.png" alt="image-20210118211943575"></p><p>设定的tokens:就是第二步中新建的token，粘贴到此处</p><p>指定存储路径：就是将来图片需要存放的路径，可随便填写，此处img/</p><p>将来图片默认上传的路径就为img/xxxx.jpg</p><p>设定自定义域名：</p><p><a href="https://raw.githubusercontent.com/webpoplayer/netpic/main">https://raw.githubusercontent.com/webpoplayer/netpic/main</a></p><p>格式为：<a href="https://raw.githubusercontent.com/github%E7%94%A8%E6%88%B7%E5%90%8D/%E5%88%9A%E6%96%B0%E5%BB%BA%E7%9A%84%E4%BB%93%E5%BA%93%E5%90%8D/%E4%BB%93%E5%BA%93%E5%88%86%E6%94%AF">https://raw.githubusercontent.com/github用户名/刚新建的仓库名/仓库分支</a></p><p>全部填写完之后，点击确定。</p><p>在点击PicGo上传区选择Markdown，然后随便拖一个图片上来到Github图传，看能否上传成功。</p><p><img src="https://raw.githubusercontent.com/webpoplayer/netpic/main/img/20210118212053.png" alt="image-20210118212053073"></p><p><img src="https://raw.githubusercontent.com/webpoplayer/netpic/main/img/20210118212117.png" alt="image-20210118212117388"></p><p>提示上传成功即可，如中途进度条显示红色，上传失败的话，可尝试重启PicGo软件再试，若一直失败，可返回检查图床设置，token，分支等信息是否填写错误。</p><h4 id="0x04-下载安装Typora"><a href="#0x04-下载安装Typora" class="headerlink" title="0x04 下载安装Typora"></a>0x04 下载安装Typora</h4><p>Typora下载地址</p><p><a href="https://www.typora.io/#windows">https://www.typora.io/#windows</a></p><p>下载完成后，一路下一步无脑安装，安装完成后进行设置</p><p>点击文件–偏好设置–图像</p><p>将插入图像处选择“上传图像”并勾选“对本地位置图像应用上述规则”</p><p>将上传服务设定为“PicGo(app)”</p><p>PicGo路径如没有自动发现，需要手动找到PicGo安装路径，设定完成如下图</p><p><img src="https://raw.githubusercontent.com/webpoplayer/netpic/main/img/20210118212217.png" alt="image-20210118212216906"></p><p>完成后截一张图贴到md文件中，可以发现此时图片正在上传，上传完成后发现图片路径为url地址而不是跟之前一样的为本地计算机绝对路径。</p><p><img src="https://raw.githubusercontent.com/webpoplayer/netpic/main/img/20210118212245.png" alt="image-20210118212245837"></p><p>后续如需对图片进行删除可到PicGo相册中删除即可。</p><p><img src="https://raw.githubusercontent.com/webpoplayer/netpic/main/img/20210118212334.png" alt="image-20210118212334280"></p><p>到此，Typora搭配图床设置到此完成。</p>]]></content>
      
      
      <categories>
          
          <category> Typora </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Github </tag>
            
            <tag> PicGO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo静态页更换电脑后环境配置</title>
      <link href="/1.html"/>
      <url>/1.html</url>
      
        <content type="html"><![CDATA[<h4 id="hexo静态页更换电脑后配置"><a href="#hexo静态页更换电脑后配置" class="headerlink" title="hexo静态页更换电脑后配置"></a>hexo静态页更换电脑后配置</h4><ol><li><p>复制原电脑上项目路径到新电脑</p></li><li><p>新电脑安装git与nodejs</p></li><li><p>新电脑环境安装</p><pre class=" language-shell"><code class="language-shell">#全局修改默认git提交者信息git config --global user.name "username"git config --global user.email user@xx.com#查询现有安装node模块npm ls --depth 0#再依次安装现有的模块[本例实际安装模块]npm install hexo-servernpm i --save hexo-wordcountnpm install --save hexo-helper-live2dnpm install hexo-servernpm install brace-expansionnpm install hexo-renderer-stylusnpm install ee-firstnpm install hexo-generator-categorynpm install hexo-generator-indexnpm install hexo-generator-searchnpm install hexo-generator-tagnpm install hexo-permalink-pinyinnpm install hexo-renderer-ejsnpm install hexo-renderer-markednpm install hexo-renderer-stylusnpm install hexo-wordcount</code></pre></li></ol><ol start="4"><li><p>如环境正常，即可在<code>\source\_posts </code> 目录中更新文章，再执行生成页面</p><pre class=" language-shell"><code class="language-shell">hexo clean && hexo g && hexo d</code></pre></li><li><p>如执行生成页面报错<code>error：spawn failed...</code>，可参考</p><p>删除<code>.deploy_git</code>文件夹;执行以下命令</p><pre class=" language-shell"><code class="language-shell">git config --global core.autocrlf false</code></pre></li></ol><p>然后，再次执行：</p><pre class=" language-shell"><code class="language-shell">hexo clean && hexo g && hexo d</code></pre><p>   问题解决。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给自己的歌</title>
      <link href="/music01.html"/>
      <url>/music01.html</url>
      
        <content type="html"><![CDATA[<h6 id="给自己的歌"><a href="#给自己的歌" class="headerlink" title="给自己的歌"></a>给自己的歌</h6><div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=394670&auto=1&height=66"></iframe></div><p>想得却不可得<br>你奈人生何<br>该舍的舍不得<br>只顾着跟往事瞎扯<br>等你发现时间是贼了<br>它早已偷光你的选择<br>爱恋不过是一场高烧<br>思念是紧跟着的<br>好不了的咳<br>是不能原谅<br>却无法阻挡<br>恨意在夜里翻墙<br>是空空荡荡 却嗡嗡作响<br>谁在你心里放冷枪<br>旧爱的誓言<br>像极了一个巴掌<br>每当你记起一句<br>就挨一个耳光<br>然后好几年都<br>闻不得闻不得女人香<br>往事并不如烟<br>是啊在爱里念旧<br>也不算美德<br>可惜恋爱不像写歌<br>再认真也成不了风格<br>我问你见过思念放过谁呢<br>不管你是累犯或是从无前科<br>我认识的只有那合久的分了<br>没见过分久的合<br>岁月你别催<br>该来的我不推<br>该还的还 该给的我给<br>岁月你别催<br>走远的我不追<br>我不过是想弄清原委<br>谁能告诉我这是什么呢<br>他的爱在心里<br>埋藏了 抹平了<br>几年了仍有余味<br>是不能原谅 却无法阻挡<br>爱意在夜里翻墙<br>是空空荡荡 却嗡嗡作响<br>谁在你心里放冷枪<br>旧爱的誓言像极了一个巴掌<br>每当你记起一句<br>就挨一个耳光<br>然后好几年都闻不得<br>闻不得女人香<br>然后好几年都闻不得<br>闻不得女人香<br>想得却不可得<br>你奈人生何<br>想得却不可得<br>情爱里无智者</p>]]></content>
      
      
      <categories>
          
          <category> 歌曲 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 听歌 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>做事风格</title>
      <link href="/mystyle.html"/>
      <url>/mystyle.html</url>
      
        <content type="html"><![CDATA[<h4 id="做事风格"><a href="#做事风格" class="headerlink" title="做事风格"></a>做事风格</h4><p>遇到困难别急着解决，</p><p>先放两天，</p><p>因为后天的努力才是最重要的。</p>]]></content>
      
      
      <categories>
          
          <category> 哲理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哲理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>卜算子·自嘲</title>
      <link href="/self-haha.html"/>
      <url>/self-haha.html</url>
      
        <content type="html"><![CDATA[<h4 id="卜算子·自嘲"><a href="#卜算子·自嘲" class="headerlink" title="卜算子·自嘲"></a>卜算子·自嘲</h4><p>本是后山人，<br>偶做前堂客。<br>醉舞经阁半卷书，<br>坐井说天阔。<br>大志戏功名，<br>海斗量福祸。<br>论到囊中羞涩时，<br>怒指乾坤错。</p>]]></content>
      
      
      <categories>
          
          <category> 卜算子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自嘲 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
